{"config":{"lang":["sv"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QGIS plugin f\u00f6r Lantm\u00e4teriets tj\u00e4nster","text":"<p>Detta QGIS-plugin ger smidig \u00e5tkomst till flera av Lantm\u00e4teriets tj\u00e4nster, t.ex. f\u00f6r att s\u00f6ka p\u00e5 adresser och fastigheter, ladda ner data och ansluta till tj\u00e4nster.</p> <p>Snabbstart \u2022 Anv\u00e4ndning \u2022 Utveckling</p>"},{"location":"#funktioner","title":"Funktioner","text":"<ul> <li> <p> S\u00f6k p\u00e5 fastigheter och adresser</p> <p>Anv\u00e4nd QGIS inbyggda s\u00f6kruta f\u00f6r att s\u00f6ka p\u00e5 beteckningar p\u00e5 adresser, fastigheter, samf\u00e4lligheter och gemensamhetsanl\u00e4ggningar</p> <p> S\u00f6kning</p> </li> <li> <p> Ladda ner fastigheter och adresser</p> <p>Ladda ner fastigheter och adresser inom avgr\u00e4nsade omr\u00e5den, eller bygg avancerade fl\u00f6den som anv\u00e4nder fastighets- och adressinformation med modellbyggaren</p> <p> Algoritmer</p> </li> <li> <p> Anv\u00e4nd uttryck f\u00f6r att stils\u00e4ttning och etiketter</p> <p>H\u00e4mta information om fastigheter och adresser i QGIS kraftfulla uttrycksmotor, f\u00f6r stils\u00e4ttning, etiketter, m.m.</p> <p> Uttryck</p> </li> <li> <p> Anslut till Lantm\u00e4teriets tj\u00e4nster</p> <p>Anslut enkelt till Lantm\u00e4teriets tj\u00e4nster utan att manuellt hantera URLer och konfiguration</p> <p> Anslutningar</p> </li> </ul>"},{"location":"bidragsgivare/","title":"Bidragsivare","text":""},{"location":"bidragsgivare/#sponsorer","title":"Sponsorer","text":"<p>Utvecklingen av detta plugin har finansierats av:</p> QGIS Sverige Sweco Sverige AB Kristianstads kommun"},{"location":"changelog/","title":"\u00c4ndringslogg","text":"<p>Detta format \u00e4r baserat p\u00e5 Keep a Changelog och detta projekt anv\u00e4nder sig av Semantic Versioning.</p>","boost":0.5},{"location":"changelog/#101-2025-09-26","title":"1.0.1 - 2025-09-26","text":"<ul> <li>Korrigera fel vid loggning av n\u00e4tverksfel vid s\u00f6kning</li> <li>Loggning f\u00f6r inl\u00e4sning/uppdatering av inst\u00e4llningar</li> <li>B\u00e4ttre hantering av egna URLer</li> </ul>","boost":0.5},{"location":"changelog/#100-2025-06-30","title":"1.0.0 - 2025-06-30","text":"<ul> <li>F\u00f6rsta publika version</li> </ul>","boost":0.5},{"location":"changelog/#010-2025-05-07","title":"0.1.0 - 2025-05-07","text":"<ul> <li>F\u00f6rhandsrelease till testare</li> </ul>","boost":0.5},{"location":"changelog/#nytt","title":"Nytt","text":"<ul> <li>S\u00f6kfunktion f\u00f6r adresser, fastigheter, samf\u00e4lligheter och gemensamhetsanl\u00e4ggningar</li> <li>Verktyg f\u00f6r nedladdning av adresser respektive fastigheter och samf\u00e4lligheter</li> <li>Funktioner f\u00f6r anv\u00e4ndning i uttryck f\u00f6r fastighets- och adressinformation</li> <li>Smidig konfiguration av anslutning till Lantm\u00e4teriet</li> <li>Enkelt att l\u00e4gga till tj\u00e4nster fr\u00e5n Lantm\u00e4teriet som datak\u00e4llor</li> </ul>","boost":0.5},{"location":"api-reference/","title":"API-referens","text":"<p>Ut\u00f6ver funktioner f\u00f6r slutanv\u00e4ndare s\u00e5 erbjuder detta plugin \u00e4ven diverse interna klasser m.m. som kan anv\u00e4ndas av andra plugin som \u00f6nskar anv\u00e4nda Lantm\u00e4teriets tj\u00e4nster. De kan \u00e4ven anv\u00e4ndas fr\u00e5n processing-skript, f\u00f6r att bygga egna uttryck, m.m.</p> <p>D\u00e5 det prim\u00e4rt \u00e4r intern kod s\u00e5 l\u00e4mnas ingen garanti p\u00e5 varken fram\u00e5t- eller bak\u00e5tkompatibilitet, men det efterstr\u00e4vas \u00e4nd\u00e5 att h\u00e5lla kompatibilitet s\u00e5 l\u00e5ngt det \u00e4r rimligt.</p>"},{"location":"api-reference/#api-klienter","title":"API-klienter","text":"<p>Pluginet erbjuder API-klienter f\u00f6r att h\u00e4mta data fr\u00e5n Lantm\u00e4teriets tj\u00e4nster. Dessa klienter ger ett typat gr\u00e4nssnitt f\u00f6r att kommunicera med tj\u00e4nsterna, och \u00e4r anpassade f\u00f6r anv\u00e4ndning i QGIS.</p> <p>Klienter finns f\u00f6r f\u00f6ljande APIer:</p> <ul> <li>Bel\u00e4genhetsadress Direkt</li> <li>Fastighet och Samf\u00e4llighet Direkt</li> <li>Fastighetsindelning Direkt</li> <li>Gemensamhetsanl\u00e4ggning Direkt</li> <li>Registerbeteckning Direkt</li> </ul>"},{"location":"api-reference/#cql2-stod","title":"CQL2-st\u00f6d","text":"<p>Vid kommunikation med OGC API Features-baserade APIer beh\u00f6ver man ofta bygga CQL2-fr\u00e5gor f\u00f6r att g\u00f6ra mer avancerad filtrering. Funktionerna i <code>lantmateriet_qgis.core.cql2</code>-modulen kan hj\u00e4lpa till med detta.</p>"},{"location":"api-reference/belagenhetsadressdirekt/","title":"Bel\u00e4genhetsadress Direkt","text":"","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.BelagenhetsadressDirektClient","title":"BelagenhetsadressDirektClient","text":"<p>Client for the Bel\u00e4genhetsadress Direkt API.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>class BelagenhetsadressDirektClient(BaseClient):\n    \"\"\"Client for the Bel\u00e4genhetsadress Direkt API.\"\"\"\n\n    base_path = \"/distribution/produkter/belagenhetsadress/v4.2\"\n\n    MAX_GET_MANY = 250\n\n    @classmethod\n    def _handle_results(\n        cls,\n        include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None,\n        srid: QgsCoordinateReferenceSystem | None,\n        results: list[dict],\n    ) -&gt; list[\n        BelagenhetsadressNoInfo\n        | BelagenhetsadressBasinformation\n        | BelagenhetsadressBerorkrets\n        | BelagenhetsadressTotal\n    ]:\n        if include is None:\n            return [\n                BelagenhetsadressNoInfo(id=result[\"id\"], geometry=None)\n                for result in results[\"features\"]\n            ]\n        elif include == \"basinformation\":\n            return [\n                from_feature(\n                    result, srid or QgsCoordinateReferenceSystem.fromEpsgId(3006)\n                )\n                for result in results[\"features\"]\n            ]\n        elif include == \"berorkrets\":\n            return [\n                BelagenhetsadressBerorkrets(\n                    id=result[\"id\"],\n                    geometry=None,\n                    registerenhetsreferens=RegisterenhetsReference(\n                        **result[\"properties\"][\"registerenhetsreferens\"]\n                    ),\n                )\n                for result in results[\"features\"]\n            ]\n        elif include == \"total\":\n            return [\n                from_feature(\n                    result, srid or QgsCoordinateReferenceSystem.fromEpsgId(3006)\n                )\n                for result in results[\"features\"]\n            ]\n        else:\n            raise ValueError(\n                \"Invalid include parameter. Must be one of: 'basinformation', 'berorkrets', 'total'.\"\n            )\n\n    @overload\n    def get_one(\n        self,\n        id: str | UUID | QUuid,\n        include: None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressNoInfo: ...\n    @overload\n    def get_one(\n        self,\n        id: str | UUID | QUuid,\n        include: Literal[\"basinformation\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressBasinformation: ...\n    @overload\n    def get_one(\n        self,\n        id: str | UUID | QUuid,\n        include: Literal[\"berorkrets\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressBasinformation: ...\n    @overload\n    def get_one(\n        self,\n        id: str | UUID | QUuid,\n        include: Literal[\"total\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressBasinformation: ...\n    def get_one(\n        self,\n        id: str | UUID | QUuid,\n        include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; (\n        BelagenhetsadressNoInfo\n        | BelagenhetsadressBasinformation\n        | BelagenhetsadressBerorkrets\n        | BelagenhetsadressTotal\n    ):\n        \"\"\"Download a single address.\"\"\"\n        query = QUrlQuery()\n        query.addQueryItem(\"includeData\", include or \"basinformation\")\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n        return self._handle_results(include, srid, result)[0]\n\n    @overload\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        include: None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressNoInfo]: ...\n    @overload\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        include: Literal[\"basinformation\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressBasinformation]: ...\n    @overload\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        include: Literal[\"berorkrets\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressBerorkrets]: ...\n    @overload\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        include: Literal[\"total\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressTotal]: ...\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[\n        BelagenhetsadressNoInfo\n        | BelagenhetsadressBasinformation\n        | BelagenhetsadressBerorkrets\n        | BelagenhetsadressTotal\n    ]:\n        \"\"\"Download many single addresses.\"\"\"\n        if len(ids) &gt; self.MAX_GET_MANY:\n            raise ValueError(\n                f\"Too many IDs. Maximum is {self.MAX_GET_MANY}, got {len(ids)}.\"\n            )\n\n        query = QUrlQuery()\n        query.addQueryItem(\"includeData\", include or \"basinformation\")\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        ids = [coerce_uuid_to_str(id) for id in ids]\n        results = self._post(\"/\", query, ids)\n        return self._handle_results(include, srid, results)\n\n    @overload\n    def get_by_registerenhet(\n        self,\n        registerenhet_id: str | UUID | QUuid | list[str | UUID | QUuid],\n        include: None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressNoInfo]: ...\n    @overload\n    def get_by_registerenhet(\n        self,\n        registerenhet_id: str | UUID | QUuid | list[str | UUID | QUuid],\n        include: Literal[\"basinformation\"] = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressBasinformation]: ...\n    @overload\n    def get_by_registerenhet(\n        self,\n        registerenhet_id: str | UUID | QUuid | list[str | UUID | QUuid],\n        include: Literal[\"berorkrets\"] = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressBerorkrets]: ...\n    @overload\n    def get_by_registerenhet(\n        self,\n        registerenhet_id: str | UUID | QUuid | list[str | UUID | QUuid],\n        include: Literal[\"total\"] = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[BelagenhetsadressTotal]: ...\n    def get_by_registerenhet(\n        self,\n        registerenhet_id: str | UUID | QUuid | list[str | UUID | QUuid],\n        include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[\n        BelagenhetsadressNoInfo\n        | BelagenhetsadressBasinformation\n        | BelagenhetsadressBerorkrets\n        | BelagenhetsadressTotal\n    ]:\n        \"\"\"Get addresses belonging to a specific property.\"\"\"\n        query = QUrlQuery()\n        query.addQueryItem(\"includeData\", include or \"basinformation\")\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        if isinstance(registerenhet_id, list):\n            registerenhet_id = [coerce_uuid_to_str(id) for id in registerenhet_id]\n            results = self._post(\"/registerenhet\", query, registerenhet_id)\n        else:\n            results = self._get(\n                f\"/registerenhet/{coerce_uuid_to_str(registerenhet_id)}\", query\n            )\n        return self._handle_results(include, srid, results)\n\n    @overload\n    def get_by_point(\n        self,\n        point: QgsGeometry | QgsReferencedGeometry,\n        include: None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressNoInfo: ...\n    @overload\n    def get_by_point(\n        self,\n        point: QgsGeometry | QgsReferencedGeometry,\n        include: Literal[\"basinformation\"] = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressBasinformation: ...\n    @overload\n    def get_by_point(\n        self,\n        point: QgsGeometry | QgsReferencedGeometry,\n        include: Literal[\"berorkrets\"] = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressBerorkrets: ...\n    @overload\n    def get_by_point(\n        self,\n        point: QgsGeometry | QgsReferencedGeometry,\n        include: Literal[\"total\"] = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; BelagenhetsadressTotal: ...\n    def get_by_point(\n        self,\n        point: QgsGeometry | QgsReferencedGeometry,\n        include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; (\n        BelagenhetsadressNoInfo\n        | BelagenhetsadressBasinformation\n        | BelagenhetsadressBerorkrets\n        | BelagenhetsadressTotal\n    ):\n        \"\"\"Get the adress closest to a given point.\"\"\"\n        query = QUrlQuery()\n        query.addQueryItem(\"includeData\", include or \"basinformation\")\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        if isinstance(point, QgsReferencedGeometry):\n            if is_supported_crs(point.crs()):\n                query.addQueryItem(\"punktSrid\", str(coerce_crs(point.crs())))\n            else:\n                transformer = QgsCoordinateTransform(\n                    point.crs(),\n                    QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                    QgsProject.instance().transformContext(),\n                )\n                point.transform(transformer)\n        try:\n            point: QgsPointXY = point.asPoint()\n        except TypeError:\n            raise ValueError(\"Invalid geometry type. Expected a point.\")\n        query.addQueryItem(\"koordinater\", f\"{point.y()},{point.x()}\")\n\n        result = self._get(\"/punkt\", query)\n        return self._handle_results(include, srid, result)[0]\n\n    @overload\n    def get_references_from_text(\n        self,\n        text: str,\n        municipality: str | None = None,\n        status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n        max_hits: int = 100,\n        split_address: Literal[False] = False,\n    ) -&gt; list[BelagenhetsadressReference]: ...\n    @overload\n    def get_references_from_text(\n        self,\n        text: str,\n        municipality: str | None = None,\n        status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n        max_hits: int = 100,\n        split_address: Literal[True] = False,\n    ) -&gt; list[BelagenhetsadressReferenceWithComponents]: ...\n    def get_references_from_text(\n        self,\n        text: str,\n        municipality: str | None = None,\n        status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n        max_hits: int = 100,\n        split_address: Literal[True, False] = False,\n    ) -&gt; list[BelagenhetsadressReference | BelagenhetsadressReferenceWithComponents]:\n        \"\"\"Get references to addresses matching a given text.\"\"\"\n        query = QUrlQuery()\n        query.addQueryItem(\"adress\", text)\n        if municipality is not None:\n            query.addQueryItem(\"kommunkod\", municipality)\n        if status is not None:\n            query.addQueryItem(\"status\", status)\n        query.addQueryItem(\"maxHits\", str(max_hits))\n        query.addQueryItem(\"splitAdress\", str(split_address).lower())\n\n        result = self._get(\"/referens/fritext\", query)\n        if split_address:\n            return [\n                BelagenhetsadressReferenceWithComponents(\n                    objektidentitet=item[\"objektidentitet\"],\n                    adress=item[\"adress\"],\n                    **item[\"adressComponents\"],\n                )\n                for item in result\n            ]\n        else:\n            return [BelagenhetsadressReference(**item) for item in result]\n\n    @overload\n    def get_references_from_geometry(\n        self,\n        geometry: QgsGeometry | QgsReferencedGeometry,\n        buffer: int = 0,\n        status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n        split_address: Literal[False] = False,\n    ) -&gt; list[BelagenhetsadressReference]: ...\n    @overload\n    def get_references_from_geometry(\n        self,\n        geometry: QgsGeometry | QgsReferencedGeometry,\n        buffer: int = 0,\n        status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n        split_address: Literal[True] = False,\n    ) -&gt; list[BelagenhetsadressReferenceWithComponents]: ...\n    def get_references_from_geometry(\n        self,\n        geometry: QgsGeometry | QgsReferencedGeometry,\n        buffer: int = 0,\n        status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n        split_address: Literal[True, False] = False,\n    ) -&gt; list[BelagenhetsadressReference | BelagenhetsadressReferenceWithComponents]:\n        \"\"\"Get references to addresses matching a given geometry.\"\"\"\n\n        query = QUrlQuery()\n        if isinstance(geometry, QgsReferencedGeometry):\n            if not is_supported_crs(geometry.crs()):\n                transformer = QgsCoordinateTransform(\n                    geometry.crs(),\n                    QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                    QgsProject.instance().transformContext(),\n                )\n                geometry.transform(transformer)\n                geometry = QgsReferencedGeometry(\n                    geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n                )\n        else:\n            geometry = QgsReferencedGeometry(\n                geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n        if status is not None:\n            query.addQueryItem(\"status\", status)\n        query.addQueryItem(\"splitAdress\", str(split_address).lower())\n\n        data = json.loads(geometry.asJson())\n        data[\"crs\"] = {\n            \"type\": \"name\",\n            \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n        }\n        data = {\"geometri\": data, \"buffer\": buffer}\n\n        result = self._post(\"/referens/geometri\", query, data)\n        if result is None:\n            raise ValueError(\"Error retrieving references\")\n        if split_address:\n            return [\n                BelagenhetsadressReferenceWithComponents(\n                    objektidentitet=item[\"objektidentitet\"],\n                    adress=item[\"adress\"],\n                    **item[\"adressComponents\"],\n                )\n                for item in result\n            ]\n        else:\n            return [BelagenhetsadressReference(**item) for item in result]\n\n    def autocomplete(\n        self,\n        search: str,\n        status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n        max_hits: int = 100,\n    ) -&gt; list[str]:\n        query = QUrlQuery()\n        query.addQueryItem(\"adress\", search)\n        if status is not None:\n            query.addQueryItem(\"status\", status)\n        query.addQueryItem(\"maxHits\", str(max_hits))\n\n        return self._get(\"/autocomplete/adress\", query)\n\n    def autocomplete_references(self, *args, **kwargs):\n        raise NotImplementedError()\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.BelagenhetsadressDirektClient.get_one","title":"get_one","text":"<pre><code>get_one(\n    id: str | UUID | QUuid,\n    include: None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressNoInfo\n</code></pre><pre><code>get_one(\n    id: str | UUID | QUuid,\n    include: Literal[\"basinformation\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressBasinformation\n</code></pre><pre><code>get_one(\n    id: str | UUID | QUuid,\n    include: Literal[\"berorkrets\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressBasinformation\n</code></pre><pre><code>get_one(\n    id: str | UUID | QUuid,\n    include: Literal[\"total\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressBasinformation\n</code></pre> <pre><code>get_one(\n    id: str | UUID | QUuid,\n    include: Literal[\n        \"basinformation\", \"berorkrets\", \"total\"\n    ]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; (\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n)\n</code></pre> <p>Download a single address.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>def get_one(\n    self,\n    id: str | UUID | QUuid,\n    include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; (\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n):\n    \"\"\"Download a single address.\"\"\"\n    query = QUrlQuery()\n    query.addQueryItem(\"includeData\", include or \"basinformation\")\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n    return self._handle_results(include, srid, result)[0]\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.BelagenhetsadressDirektClient.get_many","title":"get_many","text":"<pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    include: None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressNoInfo]\n</code></pre><pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    include: Literal[\"basinformation\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressBasinformation]\n</code></pre><pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    include: Literal[\"berorkrets\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressBerorkrets]\n</code></pre><pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    include: Literal[\"total\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressTotal]\n</code></pre> <pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    include: Literal[\n        \"basinformation\", \"berorkrets\", \"total\"\n    ]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n]\n</code></pre> <p>Download many single addresses.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>def get_many(\n    self,\n    ids: list[str | UUID | QUuid],\n    include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n]:\n    \"\"\"Download many single addresses.\"\"\"\n    if len(ids) &gt; self.MAX_GET_MANY:\n        raise ValueError(\n            f\"Too many IDs. Maximum is {self.MAX_GET_MANY}, got {len(ids)}.\"\n        )\n\n    query = QUrlQuery()\n    query.addQueryItem(\"includeData\", include or \"basinformation\")\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    ids = [coerce_uuid_to_str(id) for id in ids]\n    results = self._post(\"/\", query, ids)\n    return self._handle_results(include, srid, results)\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.BelagenhetsadressDirektClient.get_by_registerenhet","title":"get_by_registerenhet","text":"<pre><code>get_by_registerenhet(\n    registerenhet_id: str\n    | UUID\n    | QUuid\n    | list[str | UUID | QUuid],\n    include: None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressNoInfo]\n</code></pre><pre><code>get_by_registerenhet(\n    registerenhet_id: str\n    | UUID\n    | QUuid\n    | list[str | UUID | QUuid],\n    include: Literal[\"basinformation\"] = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressBasinformation]\n</code></pre><pre><code>get_by_registerenhet(\n    registerenhet_id: str\n    | UUID\n    | QUuid\n    | list[str | UUID | QUuid],\n    include: Literal[\"berorkrets\"] = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressBerorkrets]\n</code></pre><pre><code>get_by_registerenhet(\n    registerenhet_id: str\n    | UUID\n    | QUuid\n    | list[str | UUID | QUuid],\n    include: Literal[\"total\"] = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[BelagenhetsadressTotal]\n</code></pre> <pre><code>get_by_registerenhet(\n    registerenhet_id: str\n    | UUID\n    | QUuid\n    | list[str | UUID | QUuid],\n    include: Literal[\n        \"basinformation\", \"berorkrets\", \"total\"\n    ]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n]\n</code></pre> <p>Get addresses belonging to a specific property.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>def get_by_registerenhet(\n    self,\n    registerenhet_id: str | UUID | QUuid | list[str | UUID | QUuid],\n    include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n]:\n    \"\"\"Get addresses belonging to a specific property.\"\"\"\n    query = QUrlQuery()\n    query.addQueryItem(\"includeData\", include or \"basinformation\")\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    if isinstance(registerenhet_id, list):\n        registerenhet_id = [coerce_uuid_to_str(id) for id in registerenhet_id]\n        results = self._post(\"/registerenhet\", query, registerenhet_id)\n    else:\n        results = self._get(\n            f\"/registerenhet/{coerce_uuid_to_str(registerenhet_id)}\", query\n        )\n    return self._handle_results(include, srid, results)\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.BelagenhetsadressDirektClient.get_by_point","title":"get_by_point","text":"<pre><code>get_by_point(\n    point: QgsGeometry | QgsReferencedGeometry,\n    include: None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressNoInfo\n</code></pre><pre><code>get_by_point(\n    point: QgsGeometry | QgsReferencedGeometry,\n    include: Literal[\"basinformation\"] = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressBasinformation\n</code></pre><pre><code>get_by_point(\n    point: QgsGeometry | QgsReferencedGeometry,\n    include: Literal[\"berorkrets\"] = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressBerorkrets\n</code></pre><pre><code>get_by_point(\n    point: QgsGeometry | QgsReferencedGeometry,\n    include: Literal[\"total\"] = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; BelagenhetsadressTotal\n</code></pre> <pre><code>get_by_point(\n    point: QgsGeometry | QgsReferencedGeometry,\n    include: Literal[\n        \"basinformation\", \"berorkrets\", \"total\"\n    ]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; (\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n)\n</code></pre> <p>Get the adress closest to a given point.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>def get_by_point(\n    self,\n    point: QgsGeometry | QgsReferencedGeometry,\n    include: Literal[\"basinformation\", \"berorkrets\", \"total\"] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; (\n    BelagenhetsadressNoInfo\n    | BelagenhetsadressBasinformation\n    | BelagenhetsadressBerorkrets\n    | BelagenhetsadressTotal\n):\n    \"\"\"Get the adress closest to a given point.\"\"\"\n    query = QUrlQuery()\n    query.addQueryItem(\"includeData\", include or \"basinformation\")\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    if isinstance(point, QgsReferencedGeometry):\n        if is_supported_crs(point.crs()):\n            query.addQueryItem(\"punktSrid\", str(coerce_crs(point.crs())))\n        else:\n            transformer = QgsCoordinateTransform(\n                point.crs(),\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            point.transform(transformer)\n    try:\n        point: QgsPointXY = point.asPoint()\n    except TypeError:\n        raise ValueError(\"Invalid geometry type. Expected a point.\")\n    query.addQueryItem(\"koordinater\", f\"{point.y()},{point.x()}\")\n\n    result = self._get(\"/punkt\", query)\n    return self._handle_results(include, srid, result)[0]\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.BelagenhetsadressDirektClient.get_references_from_text","title":"get_references_from_text","text":"<pre><code>get_references_from_text(\n    text: str,\n    municipality: str | None = None,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    max_hits: int = 100,\n    split_address: Literal[False] = False,\n) -&gt; list[BelagenhetsadressReference]\n</code></pre><pre><code>get_references_from_text(\n    text: str,\n    municipality: str | None = None,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    max_hits: int = 100,\n    split_address: Literal[True] = False,\n) -&gt; list[BelagenhetsadressReferenceWithComponents]\n</code></pre> <pre><code>get_references_from_text(\n    text: str,\n    municipality: str | None = None,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    max_hits: int = 100,\n    split_address: Literal[True, False] = False,\n) -&gt; list[\n    BelagenhetsadressReference\n    | BelagenhetsadressReferenceWithComponents\n]\n</code></pre> <p>Get references to addresses matching a given text.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>def get_references_from_text(\n    self,\n    text: str,\n    municipality: str | None = None,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    max_hits: int = 100,\n    split_address: Literal[True, False] = False,\n) -&gt; list[BelagenhetsadressReference | BelagenhetsadressReferenceWithComponents]:\n    \"\"\"Get references to addresses matching a given text.\"\"\"\n    query = QUrlQuery()\n    query.addQueryItem(\"adress\", text)\n    if municipality is not None:\n        query.addQueryItem(\"kommunkod\", municipality)\n    if status is not None:\n        query.addQueryItem(\"status\", status)\n    query.addQueryItem(\"maxHits\", str(max_hits))\n    query.addQueryItem(\"splitAdress\", str(split_address).lower())\n\n    result = self._get(\"/referens/fritext\", query)\n    if split_address:\n        return [\n            BelagenhetsadressReferenceWithComponents(\n                objektidentitet=item[\"objektidentitet\"],\n                adress=item[\"adress\"],\n                **item[\"adressComponents\"],\n            )\n            for item in result\n        ]\n    else:\n        return [BelagenhetsadressReference(**item) for item in result]\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.BelagenhetsadressDirektClient.get_references_from_geometry","title":"get_references_from_geometry","text":"<pre><code>get_references_from_geometry(\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    split_address: Literal[False] = False,\n) -&gt; list[BelagenhetsadressReference]\n</code></pre><pre><code>get_references_from_geometry(\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    split_address: Literal[True] = False,\n) -&gt; list[BelagenhetsadressReferenceWithComponents]\n</code></pre> <pre><code>get_references_from_geometry(\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    split_address: Literal[True, False] = False,\n) -&gt; list[\n    BelagenhetsadressReference\n    | BelagenhetsadressReferenceWithComponents\n]\n</code></pre> <p>Get references to addresses matching a given geometry.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>def get_references_from_geometry(\n    self,\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n    status: Literal[\"G\u00e4llande\", \"Reserverad\"] | None = None,\n    split_address: Literal[True, False] = False,\n) -&gt; list[BelagenhetsadressReference | BelagenhetsadressReferenceWithComponents]:\n    \"\"\"Get references to addresses matching a given geometry.\"\"\"\n\n    query = QUrlQuery()\n    if isinstance(geometry, QgsReferencedGeometry):\n        if not is_supported_crs(geometry.crs()):\n            transformer = QgsCoordinateTransform(\n                geometry.crs(),\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            geometry.transform(transformer)\n            geometry = QgsReferencedGeometry(\n                geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n    else:\n        geometry = QgsReferencedGeometry(\n            geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n        )\n    if status is not None:\n        query.addQueryItem(\"status\", status)\n    query.addQueryItem(\"splitAdress\", str(split_address).lower())\n\n    data = json.loads(geometry.asJson())\n    data[\"crs\"] = {\n        \"type\": \"name\",\n        \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n    }\n    data = {\"geometri\": data, \"buffer\": buffer}\n\n    result = self._post(\"/referens/geometri\", query, data)\n    if result is None:\n        raise ValueError(\"Error retrieving references\")\n    if split_address:\n        return [\n            BelagenhetsadressReferenceWithComponents(\n                objektidentitet=item[\"objektidentitet\"],\n                adress=item[\"adress\"],\n                **item[\"adressComponents\"],\n            )\n            for item in result\n        ]\n    else:\n        return [BelagenhetsadressReference(**item) for item in result]\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#data-types","title":"Data Types","text":"","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.belagenhetsadressdirekt.BelagenhetsadressReference","title":"<code>BelagenhetsadressReference</code>","text":"<p>A reference to an address.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>class BelagenhetsadressReference(TypedDict):\n    \"\"\"A reference to an address.\"\"\"\n\n    objektidentitet: str\n    adress: str\n</code></pre>","boost":0.5},{"location":"api-reference/belagenhetsadressdirekt/#lantmateriet_qgis.core.clients.belagenhetsadressdirekt.BelagenhetsadressReferenceWithComponents","title":"<code>BelagenhetsadressReferenceWithComponents</code>","text":"<p>A reference to an address, with separate components.</p> Source code in <code>lantmateriet_qgis/core/clients/belagenhetsadressdirekt.py</code> <pre><code>class BelagenhetsadressReferenceWithComponents(BelagenhetsadressReference):\n    \"\"\"A reference to an address, with separate components.\"\"\"\n\n    kommun: str\n    kommundel: str\n    adressomrade: str\n    gardsadressomrade: str | None\n    adressplatsnummer: str | None\n    bokstavstillagg: str | None\n    lagestillagg: str | None\n    lagestillagsnummer: str | None\n    avvikandeAdressplatsBeteckning: str | None\n    postnummer: str | None\n    postort: str | None\n</code></pre>","boost":0.5},{"location":"api-reference/cql2/","title":"CQL2 Helpers","text":"<p>These are helpers to help create CQL2 queries.</p>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.property","title":"property","text":"<pre><code>property(name: str) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def property(name: str) -&gt; dict:\n    return dict(property=name)\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.like","title":"like","text":"<pre><code>like(a: str | dict, b: str | dict) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def like(a: str | dict, b: str | dict) -&gt; dict:\n    return dict(op=\"like\", args=[a, b])\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.startswith","title":"startswith","text":"<pre><code>startswith(a: str | dict, b: str) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def startswith(a: str | dict, b: str) -&gt; dict:\n    return dict(op=\"like\", args=[a, b + \"%\"])\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.equals","title":"equals","text":"<pre><code>equals(a: str | dict, b: str | int | dict) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def equals(a: str | dict, b: str | int | dict) -&gt; dict:\n    return dict(op=\"=\", args=[a, b])\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.between","title":"between","text":"<pre><code>between(\n    value: int | dict, lower: int | dict, upper: int | dict\n) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def between(value: int | dict, lower: int | dict, upper: int | dict) -&gt; dict:\n    return dict(op=\"between\", args=[value, lower, upper])\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.in_","title":"in_","text":"<pre><code>in_(a: str | dict, b: list[str | int | dict]) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def in_(a: str | dict, b: list[str | int | dict]) -&gt; dict:\n    if len(b) == 1:\n        return equals(a, b[0])\n    return dict(op=\"in\", args=[a, b])\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.is_null","title":"is_null","text":"<pre><code>is_null(a: str | dict) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def is_null(a: str | dict) -&gt; dict:\n    return dict(op=\"isNull\", args=[a])\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.plus","title":"plus","text":"<pre><code>plus(a: str | int | dict, b: str | dict) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def plus(a: str | int | dict, b: str | dict) -&gt; dict:\n    return dict(op=\"+\", args=[a, b])\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.and_","title":"and_","text":"<pre><code>and_(items: list[dict]) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def and_(items: list[dict]) -&gt; dict:\n    if len(items) == 1:\n        return items[0]\n    return dict(op=\"and\", args=items)\n</code></pre>"},{"location":"api-reference/cql2/#lantmateriet_qgis.core.util.cql2.or_","title":"or_","text":"<pre><code>or_(items: list[dict]) -&gt; dict\n</code></pre> Source code in <code>lantmateriet_qgis/core/util/cql2.py</code> <pre><code>def or_(items: list[dict]) -&gt; dict:\n    if len(items) == 1:\n        return items[0]\n    return dict(op=\"or\", args=items)\n</code></pre>"},{"location":"api-reference/fastighetochsamfallighetdirekt/","title":"Fastighet och Samf\u00e4llighet Direkt","text":""},{"location":"api-reference/fastighetochsamfallighetdirekt/#lantmateriet_qgis.core.clients.FastighetOchSamfallighetDirektClient","title":"FastighetOchSamfallighetDirektClient","text":"<p>Client for the Fastighet och Samf\u00e4llighet Direkt API.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetochsamfallighetdirekt.py</code> <pre><code>class FastighetOchSamfallighetDirektClient(BaseClient):\n    \"\"\"Client for the Fastighet och Samf\u00e4llighet Direkt API.\"\"\"\n\n    base_path = \"/distribution/produkter/fastighetsamfallighet/v3.1\"\n\n    MAX_GET_MANY = 250\n\n    @classmethod\n    def _handle_results(\n        cls,\n        _include: IncludableData | Iterable[IncludableData] | None,\n        srid: QgsCoordinateReferenceSystem | None,\n        results: list[dict],\n    ) -&gt; list[dict]:\n        return [\n            from_feature(result, srid or QgsCoordinateReferenceSystem.fromEpsgId(3006))\n            for result in results[\"features\"]\n        ]\n\n    def get_one(\n        self,\n        id: str | UUID | QUuid,\n        include: IncludableData | Iterable[IncludableData] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; dict:\n        \"\"\"Download a single property.\"\"\"\n        query = QUrlQuery()\n        if isinstance(include, str):\n            query.addQueryItem(\"includeData\", include)\n        elif include is not None:\n            query.addQueryItem(\"includeData\", \",\".join(include))\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n        return self._handle_results(include, srid, result)[0]\n\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        include: IncludableData | Iterable[IncludableData] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[dict]:\n        \"\"\"Download many single properties.\"\"\"\n        query = QUrlQuery()\n        query.addQueryItem(\"includeData\", include or \"basinformation\")\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        ids = [coerce_uuid_to_str(id) for id in ids]\n        results = self._post(\"/\", query, ids)\n        return self._handle_results(include, srid, results)\n\n    def get_references_from_aktbeteckning(\n        self, text: str\n    ) -&gt; list[RegisterenhetsReference]:\n        query = QUrlQuery()\n        query.addQueryItem(\"aktbeteckning\", text)\n\n        result = self._get(\"/referens/aktbeteckning\", query)\n        return [RegisterenhetsReference(**item) for item in result]\n\n    def get_references_from_geometry(\n        self, geometry: QgsGeometry | QgsReferencedGeometry, buffer: int = 0\n    ) -&gt; list[RegisterenhetsReference]:\n        \"\"\"Download property references based on a geometri.\"\"\"\n        query = QUrlQuery()\n        if isinstance(geometry, QgsReferencedGeometry):\n            if not is_supported_crs(geometry.crs()):\n                transformer = QgsCoordinateTransform(\n                    geometry.crs(),\n                    QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                    QgsProject.instance().transformContext(),\n                )\n                geometry.transform(transformer)\n                geometry = QgsReferencedGeometry(\n                    geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n                )\n        else:\n            geometry = QgsReferencedGeometry(\n                geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n\n        data = json.loads(geometry.asJson())\n        data[\"crs\"] = {\n            \"type\": \"name\",\n            \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n        }\n        data = {\"geometri\": data, \"buffer\": buffer}\n\n        result = self._post(\"/referens/geometri\", query, data)\n        if result is None:\n            raise ValueError(\"Error retrieving references\")\n        return [RegisterenhetsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/fastighetochsamfallighetdirekt/#lantmateriet_qgis.core.clients.FastighetOchSamfallighetDirektClient.get_one","title":"get_one","text":"<pre><code>get_one(\n    id: str | UUID | QUuid,\n    include: IncludableData\n    | Iterable[IncludableData]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; dict\n</code></pre> <p>Download a single property.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetochsamfallighetdirekt.py</code> <pre><code>def get_one(\n    self,\n    id: str | UUID | QUuid,\n    include: IncludableData | Iterable[IncludableData] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; dict:\n    \"\"\"Download a single property.\"\"\"\n    query = QUrlQuery()\n    if isinstance(include, str):\n        query.addQueryItem(\"includeData\", include)\n    elif include is not None:\n        query.addQueryItem(\"includeData\", \",\".join(include))\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n    return self._handle_results(include, srid, result)[0]\n</code></pre>"},{"location":"api-reference/fastighetochsamfallighetdirekt/#lantmateriet_qgis.core.clients.FastighetOchSamfallighetDirektClient.get_many","title":"get_many","text":"<pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    include: IncludableData\n    | Iterable[IncludableData]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[dict]\n</code></pre> <p>Download many single properties.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetochsamfallighetdirekt.py</code> <pre><code>def get_many(\n    self,\n    ids: list[str | UUID | QUuid],\n    include: IncludableData | Iterable[IncludableData] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[dict]:\n    \"\"\"Download many single properties.\"\"\"\n    query = QUrlQuery()\n    query.addQueryItem(\"includeData\", include or \"basinformation\")\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    ids = [coerce_uuid_to_str(id) for id in ids]\n    results = self._post(\"/\", query, ids)\n    return self._handle_results(include, srid, results)\n</code></pre>"},{"location":"api-reference/fastighetochsamfallighetdirekt/#lantmateriet_qgis.core.clients.FastighetOchSamfallighetDirektClient.get_references_from_geometry","title":"get_references_from_geometry","text":"<pre><code>get_references_from_geometry(\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n) -&gt; list[RegisterenhetsReference]\n</code></pre> <p>Download property references based on a geometri.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetochsamfallighetdirekt.py</code> <pre><code>def get_references_from_geometry(\n    self, geometry: QgsGeometry | QgsReferencedGeometry, buffer: int = 0\n) -&gt; list[RegisterenhetsReference]:\n    \"\"\"Download property references based on a geometri.\"\"\"\n    query = QUrlQuery()\n    if isinstance(geometry, QgsReferencedGeometry):\n        if not is_supported_crs(geometry.crs()):\n            transformer = QgsCoordinateTransform(\n                geometry.crs(),\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            geometry.transform(transformer)\n            geometry = QgsReferencedGeometry(\n                geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n    else:\n        geometry = QgsReferencedGeometry(\n            geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n        )\n\n    data = json.loads(geometry.asJson())\n    data[\"crs\"] = {\n        \"type\": \"name\",\n        \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n    }\n    data = {\"geometri\": data, \"buffer\": buffer}\n\n    result = self._post(\"/referens/geometri\", query, data)\n    if result is None:\n        raise ValueError(\"Error retrieving references\")\n    return [RegisterenhetsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/fastighetochsamfallighetdirekt/#data-types","title":"Data Types","text":""},{"location":"api-reference/fastighetochsamfallighetdirekt/#lantmateriet_qgis.core.clients.fastighetochsamfallighetdirekt.IncludableData","title":"<code>IncludableData = Literal['basinformation', 'registerbeteckning', 'atgard', 'beteckningForeReformen', 'andel', 'omrade', 'historik', 'total']</code>  <code>module-attribute</code>","text":""},{"location":"api-reference/fastighetochsamfallighetdirekt/#lantmateriet_qgis.core.clients.fastighetochsamfallighetdirekt.RegisterenhetsReference","title":"<code>RegisterenhetsReference</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/fastighetochsamfallighetdirekt.py</code> <pre><code>class RegisterenhetsReference(TypedDict):\n    objektidentitet: str\n    beteckning: str\n    typ: Literal[\"fastighet\", \"samf\u00e4llighet\"]\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/","title":"Fastighetsindelning Direkt","text":""},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.FastighetsindelningDirektClient","title":"FastighetsindelningDirektClient","text":"<p>Client for the Fastighetsindelning Direkt API.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>class FastighetsindelningDirektClient(BaseClient):\n    \"\"\"Client for the Fastighetsindelning Direkt API.\"\"\"\n\n    base_path = \"/ogc-features/v1/fastighetsindelning\"\n\n    def find_registerenheter(\n        self, collection: Collection, filter: dict, limit: int = 10\n    ) -&gt; list[Registerenhet]:\n        \"\"\"Find a list of properties based on a CQL2 filter.\"\"\"\n\n        query = QUrlQuery()\n        query.addQueryItem(\"filter\", json.dumps(filter))\n        query.addQueryItem(\"filter-lang\", \"cql2-json\")\n        query.addQueryItem(\"limit\", str(limit))\n        query.addQueryItem(\"omradesnummer\", \"1\")\n        response = self.get_omraden(collection, query, False)\n        return [\n            Registerenhet(\n                **omit(\n                    feature,\n                    (\n                        \"geometry\",\n                        \"omradesnummer\",\n                        \"objektidentitet\",\n                        \"registerenhetsreferens\",\n                        \"beteckning\",\n                    ),\n                ),\n                objektidentitet=feature[\"registerenhetsreferens\"],\n                beteckning=format_beteckning(feature),\n            )\n            for feature in response\n        ]\n\n    @overload\n    def get_omrade_at_point(\n        self,\n        collection: Collection,\n        point: QgsGeometry,\n        crs: QgsCoordinateReferenceSystem,\n        with_geometry: Literal[True] = False,\n    ) -&gt; RegisterenhetsOmradeWithGeometry: ...\n    @overload\n    def get_omrade_at_point(\n        self,\n        collection: Collection,\n        point: QgsGeometry,\n        crs: QgsCoordinateReferenceSystem,\n        with_geometry: Literal[False] = False,\n    ) -&gt; RegisterenhetsOmrade: ...\n    def get_omrade_at_point(\n        self,\n        collection: Collection,\n        point: QgsGeometry,\n        crs: QgsCoordinateReferenceSystem,\n        with_geometry: Literal[True, False] = False,\n    ) -&gt; RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry:\n        \"\"\"Get the registerenhetsomr\u00e5de at a given point.\"\"\"\n\n        query = QUrlQuery()\n        if crs.authid() not in (\"EPSG:3006\", \"EPSG:4326\"):\n            transformer = QgsCoordinateTransform(\n                crs,\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            point.transform(transformer)\n            crs = QgsCoordinateReferenceSystem.fromEpsgId(3006)\n        query.addQueryItem(\n            \"bbox\",\n            f\"{point.centroid().asPoint().y()},{point.centroid().asPoint().x()},{point.centroid().asPoint().y()},{point.centroid().asPoint().x()}\",\n        )\n        query.addQueryItem(\"bbox-crs\", crs.toOgcUri())\n        query.addQueryItem(\"limit\", \"1\")\n        omraden = self.get_omraden(collection, query, with_geometry)\n        if len(omraden) == 0:\n            return None\n        return omraden[0]\n\n    @overload\n    def get_omraden_at_rect(\n        self,\n        collection: Collection,\n        rect: QgsGeometry,\n        crs: QgsCoordinateReferenceSystem,\n        with_geometry: Literal[True] = False,\n    ) -&gt; list[RegisterenhetsOmradeWithGeometry]: ...\n    @overload\n    def get_omraden_at_rect(\n        self,\n        collection: Collection,\n        rect: QgsGeometry,\n        crs: QgsCoordinateReferenceSystem,\n        with_geometry: Literal[False] = False,\n    ) -&gt; list[RegisterenhetsOmrade]: ...\n    def get_omraden_at_rect(\n        self,\n        collection: Collection,\n        rect: QgsGeometry,\n        crs: QgsCoordinateReferenceSystem,\n        with_geometry: Literal[True, False] = False,\n    ) -&gt; list[RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry]:\n        \"\"\"Get all registerenhetsomr\u00e5den within a given rectangle.\"\"\"\n\n        query = QUrlQuery()\n        if crs.authid() not in (\"EPSG:3006\", \"EPSG:4326\"):\n            transformer = QgsCoordinateTransform(\n                crs,\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            rect.transform(transformer)\n            crs = QgsCoordinateReferenceSystem.fromEpsgId(3006)\n        query.addQueryItem(\n            \"bbox\",\n            f\"{rect.boundingBox().yMinimum()},{rect.boundingBox().xMinimum()},{rect.boundingBox().yMaximum()},{rect.boundingBox().xMaximum()}\",\n        )\n        query.addQueryItem(\"bbox-crs\", crs.toOgcUri())\n        query.addQueryItem(\"limit\", \"10000\")\n        return self.get_omraden(collection, query, with_geometry)\n\n    @overload\n    def get_omraden(\n        self,\n        collection: Collection,\n        query: QUrlQuery,\n        with_geometry: Literal[False] = False,\n    ) -&gt; list[RegisterenhetsOmrade]: ...\n    @overload\n    def get_omraden(\n        self,\n        collection: Collection,\n        query: QUrlQuery,\n        with_geometry: Literal[True] = False,\n    ) -&gt; list[RegisterenhetsOmradeWithGeometry]: ...\n    def get_omraden(\n        self, collection: Collection, query: QUrlQuery, with_geometry: bool = False\n    ) -&gt; list[RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry]:\n        \"\"\"Get all registerenhetsomr\u00e5den based on a URL query.\"\"\"\n\n        response, headers = self._get_with_headers(\n            f\"/collections/{collection}/items\", query\n        )\n\n        crs_header = headers.get(\"content-crs\", \"\").replace(\"&lt;\", \"\").replace(\"&gt;\", \"\")\n        if crs_header == \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\":\n            crs = QgsCoordinateReferenceSystem.fromEpsgId(4326)\n        elif crs_header.startswith(\"http://www.opengis.net/def/crs/EPSG/0/\"):\n            epsg_id = int(crs_header.rpartition(\"EPSG/0/\")[2])\n            crs = QgsCoordinateReferenceSystem.fromEpsgId(epsg_id)\n        else:\n            raise ValueError(f\"Unsupported CRS: {crs_header}\")\n\n        def maybe_flip(geometry: QgsGeometry) -&gt; QgsGeometry:\n            if crs.authid() == \"EPSG:4326\":\n                return geometry\n            absgeom = geometry.get()\n            absgeom.swapXy()\n            return QgsGeometry(absgeom.clone())\n\n        if with_geometry:\n            return [\n                RegisterenhetsOmradeWithGeometry(\n                    **omit(\n                        feature[\"properties\"],\n                        (\"senastandrad\", \"geometry\", \"beteckning\"),\n                    ),\n                    senastandrad=QDateTime.fromString(\n                        feature[\"properties\"][\"senastandrad\"], Qt.DateFormat.ISODate\n                    ),\n                    geometry=QgsReferencedGeometry(\n                        maybe_flip(\n                            QgsJsonUtils.geometryFromGeoJson(\n                                json.dumps(feature[\"geometry\"])\n                            )\n                        ),\n                        crs,\n                    ),\n                    beteckning=f\"{feature['properties']['kommunnamn']} {feature['properties']['trakt']} {feature['properties']['etikett']}\",\n                )\n                for feature in response[\"features\"]\n            ]\n        else:\n            return [\n                RegisterenhetsOmrade(\n                    **omit(feature[\"properties\"], (\"senastandrad\", \"beteckning\")),\n                    senastandrad=QDateTime.fromString(\n                        feature[\"properties\"][\"senastandrad\"], Qt.DateFormat.ISODate\n                    ),\n                    beteckning=f\"{feature['properties']['kommunnamn']} {feature['properties']['trakt']} {feature['properties']['etikett']}\",\n                )\n                for feature in response[\"features\"]\n            ]\n\n    def get_registerenheter(\n        self, collection: Collection, ids: Iterable[str]\n    ) -&gt; dict[str, Registerenhet] | None:\n        \"\"\"Get full representations of the requested properties.\"\"\"\n\n        query = QUrlQuery()\n        if len(ids) == 1:\n            query.addQueryItem(\"registerenhetsreferens\", list(ids)[0])\n        else:\n            query.addQueryItem(\n                \"filter\",\n                json.dumps(\n                    cql2.in_(cql2.property(\"registerenhetsreferens\"), list(ids))\n                ),\n            )\n            query.addQueryItem(\"filter-lang\", \"cql2-json\")\n        query.addQueryItem(\"limit\", \"1000\")\n        query.addQueryItem(\n            \"crs\", QgsCoordinateReferenceSystem.fromEpsgId(3006).toOgcUri()\n        )\n        response = self.get_omraden(collection, query, True)\n        response = {\n            id: [fg for fg in response if fg[\"registerenhetsreferens\"] == id]\n            for id in ids\n        }\n        return {\n            id: Registerenhet(\n                **omit(\n                    omraden[0],\n                    (\n                        \"senastandrad\",\n                        \"geometry\",\n                        \"beteckning\",\n                        \"registerenhetsreferens\",\n                        \"objektidentitet\",\n                        \"etikett\",\n                    ),\n                ),\n                objektidentitet=omraden[0][\"registerenhetsreferens\"],\n                senastandrad=max(omrade[\"senastandrad\"] for omrade in omraden),\n                geometry=QgsReferencedGeometry(\n                    QgsGeometry.unaryUnion([omrade[\"geometry\"] for omrade in omraden]),\n                    omraden[0][\"geometry\"].crs(),\n                ),\n                etikett=omraden[0][\"etikett\"].split(\"&gt;\")[0],\n                beteckning=format_beteckning(omraden[0]),\n            )\n            for id, omraden in response.items()\n        }\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.FastighetsindelningDirektClient.find_registerenheter","title":"find_registerenheter","text":"<pre><code>find_registerenheter(\n    collection: Collection, filter: dict, limit: int = 10\n) -&gt; list[Registerenhet]\n</code></pre> <p>Find a list of properties based on a CQL2 filter.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>def find_registerenheter(\n    self, collection: Collection, filter: dict, limit: int = 10\n) -&gt; list[Registerenhet]:\n    \"\"\"Find a list of properties based on a CQL2 filter.\"\"\"\n\n    query = QUrlQuery()\n    query.addQueryItem(\"filter\", json.dumps(filter))\n    query.addQueryItem(\"filter-lang\", \"cql2-json\")\n    query.addQueryItem(\"limit\", str(limit))\n    query.addQueryItem(\"omradesnummer\", \"1\")\n    response = self.get_omraden(collection, query, False)\n    return [\n        Registerenhet(\n            **omit(\n                feature,\n                (\n                    \"geometry\",\n                    \"omradesnummer\",\n                    \"objektidentitet\",\n                    \"registerenhetsreferens\",\n                    \"beteckning\",\n                ),\n            ),\n            objektidentitet=feature[\"registerenhetsreferens\"],\n            beteckning=format_beteckning(feature),\n        )\n        for feature in response\n    ]\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.FastighetsindelningDirektClient.get_omrade_at_point","title":"get_omrade_at_point","text":"<pre><code>get_omrade_at_point(\n    collection: Collection,\n    point: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[True] = False,\n) -&gt; RegisterenhetsOmradeWithGeometry\n</code></pre><pre><code>get_omrade_at_point(\n    collection: Collection,\n    point: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[False] = False,\n) -&gt; RegisterenhetsOmrade\n</code></pre> <pre><code>get_omrade_at_point(\n    collection: Collection,\n    point: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[True, False] = False,\n) -&gt; (\n    RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry\n)\n</code></pre> <p>Get the registerenhetsomr\u00e5de at a given point.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>def get_omrade_at_point(\n    self,\n    collection: Collection,\n    point: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[True, False] = False,\n) -&gt; RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry:\n    \"\"\"Get the registerenhetsomr\u00e5de at a given point.\"\"\"\n\n    query = QUrlQuery()\n    if crs.authid() not in (\"EPSG:3006\", \"EPSG:4326\"):\n        transformer = QgsCoordinateTransform(\n            crs,\n            QgsCoordinateReferenceSystem.fromEpsgId(3006),\n            QgsProject.instance().transformContext(),\n        )\n        point.transform(transformer)\n        crs = QgsCoordinateReferenceSystem.fromEpsgId(3006)\n    query.addQueryItem(\n        \"bbox\",\n        f\"{point.centroid().asPoint().y()},{point.centroid().asPoint().x()},{point.centroid().asPoint().y()},{point.centroid().asPoint().x()}\",\n    )\n    query.addQueryItem(\"bbox-crs\", crs.toOgcUri())\n    query.addQueryItem(\"limit\", \"1\")\n    omraden = self.get_omraden(collection, query, with_geometry)\n    if len(omraden) == 0:\n        return None\n    return omraden[0]\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.FastighetsindelningDirektClient.get_omraden_at_rect","title":"get_omraden_at_rect","text":"<pre><code>get_omraden_at_rect(\n    collection: Collection,\n    rect: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[True] = False,\n) -&gt; list[RegisterenhetsOmradeWithGeometry]\n</code></pre><pre><code>get_omraden_at_rect(\n    collection: Collection,\n    rect: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[False] = False,\n) -&gt; list[RegisterenhetsOmrade]\n</code></pre> <pre><code>get_omraden_at_rect(\n    collection: Collection,\n    rect: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[True, False] = False,\n) -&gt; list[\n    RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry\n]\n</code></pre> <p>Get all registerenhetsomr\u00e5den within a given rectangle.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>def get_omraden_at_rect(\n    self,\n    collection: Collection,\n    rect: QgsGeometry,\n    crs: QgsCoordinateReferenceSystem,\n    with_geometry: Literal[True, False] = False,\n) -&gt; list[RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry]:\n    \"\"\"Get all registerenhetsomr\u00e5den within a given rectangle.\"\"\"\n\n    query = QUrlQuery()\n    if crs.authid() not in (\"EPSG:3006\", \"EPSG:4326\"):\n        transformer = QgsCoordinateTransform(\n            crs,\n            QgsCoordinateReferenceSystem.fromEpsgId(3006),\n            QgsProject.instance().transformContext(),\n        )\n        rect.transform(transformer)\n        crs = QgsCoordinateReferenceSystem.fromEpsgId(3006)\n    query.addQueryItem(\n        \"bbox\",\n        f\"{rect.boundingBox().yMinimum()},{rect.boundingBox().xMinimum()},{rect.boundingBox().yMaximum()},{rect.boundingBox().xMaximum()}\",\n    )\n    query.addQueryItem(\"bbox-crs\", crs.toOgcUri())\n    query.addQueryItem(\"limit\", \"10000\")\n    return self.get_omraden(collection, query, with_geometry)\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.FastighetsindelningDirektClient.get_omraden","title":"get_omraden","text":"<pre><code>get_omraden(\n    collection: Collection,\n    query: QUrlQuery,\n    with_geometry: Literal[False] = False,\n) -&gt; list[RegisterenhetsOmrade]\n</code></pre><pre><code>get_omraden(\n    collection: Collection,\n    query: QUrlQuery,\n    with_geometry: Literal[True] = False,\n) -&gt; list[RegisterenhetsOmradeWithGeometry]\n</code></pre> <pre><code>get_omraden(\n    collection: Collection,\n    query: QUrlQuery,\n    with_geometry: bool = False,\n) -&gt; list[\n    RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry\n]\n</code></pre> <p>Get all registerenhetsomr\u00e5den based on a URL query.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>def get_omraden(\n    self, collection: Collection, query: QUrlQuery, with_geometry: bool = False\n) -&gt; list[RegisterenhetsOmrade | RegisterenhetsOmradeWithGeometry]:\n    \"\"\"Get all registerenhetsomr\u00e5den based on a URL query.\"\"\"\n\n    response, headers = self._get_with_headers(\n        f\"/collections/{collection}/items\", query\n    )\n\n    crs_header = headers.get(\"content-crs\", \"\").replace(\"&lt;\", \"\").replace(\"&gt;\", \"\")\n    if crs_header == \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\":\n        crs = QgsCoordinateReferenceSystem.fromEpsgId(4326)\n    elif crs_header.startswith(\"http://www.opengis.net/def/crs/EPSG/0/\"):\n        epsg_id = int(crs_header.rpartition(\"EPSG/0/\")[2])\n        crs = QgsCoordinateReferenceSystem.fromEpsgId(epsg_id)\n    else:\n        raise ValueError(f\"Unsupported CRS: {crs_header}\")\n\n    def maybe_flip(geometry: QgsGeometry) -&gt; QgsGeometry:\n        if crs.authid() == \"EPSG:4326\":\n            return geometry\n        absgeom = geometry.get()\n        absgeom.swapXy()\n        return QgsGeometry(absgeom.clone())\n\n    if with_geometry:\n        return [\n            RegisterenhetsOmradeWithGeometry(\n                **omit(\n                    feature[\"properties\"],\n                    (\"senastandrad\", \"geometry\", \"beteckning\"),\n                ),\n                senastandrad=QDateTime.fromString(\n                    feature[\"properties\"][\"senastandrad\"], Qt.DateFormat.ISODate\n                ),\n                geometry=QgsReferencedGeometry(\n                    maybe_flip(\n                        QgsJsonUtils.geometryFromGeoJson(\n                            json.dumps(feature[\"geometry\"])\n                        )\n                    ),\n                    crs,\n                ),\n                beteckning=f\"{feature['properties']['kommunnamn']} {feature['properties']['trakt']} {feature['properties']['etikett']}\",\n            )\n            for feature in response[\"features\"]\n        ]\n    else:\n        return [\n            RegisterenhetsOmrade(\n                **omit(feature[\"properties\"], (\"senastandrad\", \"beteckning\")),\n                senastandrad=QDateTime.fromString(\n                    feature[\"properties\"][\"senastandrad\"], Qt.DateFormat.ISODate\n                ),\n                beteckning=f\"{feature['properties']['kommunnamn']} {feature['properties']['trakt']} {feature['properties']['etikett']}\",\n            )\n            for feature in response[\"features\"]\n        ]\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.FastighetsindelningDirektClient.get_registerenheter","title":"get_registerenheter","text":"<pre><code>get_registerenheter(\n    collection: Collection, ids: Iterable[str]\n) -&gt; dict[str, Registerenhet] | None\n</code></pre> <p>Get full representations of the requested properties.</p> Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>def get_registerenheter(\n    self, collection: Collection, ids: Iterable[str]\n) -&gt; dict[str, Registerenhet] | None:\n    \"\"\"Get full representations of the requested properties.\"\"\"\n\n    query = QUrlQuery()\n    if len(ids) == 1:\n        query.addQueryItem(\"registerenhetsreferens\", list(ids)[0])\n    else:\n        query.addQueryItem(\n            \"filter\",\n            json.dumps(\n                cql2.in_(cql2.property(\"registerenhetsreferens\"), list(ids))\n            ),\n        )\n        query.addQueryItem(\"filter-lang\", \"cql2-json\")\n    query.addQueryItem(\"limit\", \"1000\")\n    query.addQueryItem(\n        \"crs\", QgsCoordinateReferenceSystem.fromEpsgId(3006).toOgcUri()\n    )\n    response = self.get_omraden(collection, query, True)\n    response = {\n        id: [fg for fg in response if fg[\"registerenhetsreferens\"] == id]\n        for id in ids\n    }\n    return {\n        id: Registerenhet(\n            **omit(\n                omraden[0],\n                (\n                    \"senastandrad\",\n                    \"geometry\",\n                    \"beteckning\",\n                    \"registerenhetsreferens\",\n                    \"objektidentitet\",\n                    \"etikett\",\n                ),\n            ),\n            objektidentitet=omraden[0][\"registerenhetsreferens\"],\n            senastandrad=max(omrade[\"senastandrad\"] for omrade in omraden),\n            geometry=QgsReferencedGeometry(\n                QgsGeometry.unaryUnion([omrade[\"geometry\"] for omrade in omraden]),\n                omraden[0][\"geometry\"].crs(),\n            ),\n            etikett=omraden[0][\"etikett\"].split(\"&gt;\")[0],\n            beteckning=format_beteckning(omraden[0]),\n        )\n        for id, omraden in response.items()\n    }\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#data-types","title":"Data Types","text":""},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.fastighetsindelningdirekt.Collection","title":"<code>Collection = Literal['registerenhetsomradesytor', 'registerenhetsomradeslinjer', 'registerenhetsomradespunkter']</code>  <code>module-attribute</code>","text":""},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.fastighetsindelningdirekt.Registerenhet","title":"<code>Registerenhet</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>class Registerenhet(TypedDict):\n    objektidentitet: str\n    objekttyp: Literal[\"fastighetsomr\u00e5de\"]\n    senastandrad: QDateTime\n    lanskod: str\n    kommunkod: str\n    kommunnamn: str\n    trakt: str\n    block: str\n    enhet: int | None\n    etikett: str\n    beteckning: str\n    geometry: QgsReferencedGeometry\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.fastighetsindelningdirekt.RegisterenhetsOmrade","title":"<code>RegisterenhetsOmrade</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>class RegisterenhetsOmrade(TypedDict):\n    objektidentitet: str\n    registerenhetsreferens: str\n    objekttyp: Literal[\"fastighetsomr\u00e5de\"]\n    senastandrad: QDateTime\n    lanskod: str\n    kommunkod: str\n    kommunnamn: str\n    trakt: str\n    block: str\n    enhet: int | None\n    omradesnummer: int\n    etikett: str\n    beteckning: str\n</code></pre>"},{"location":"api-reference/fastighetsindelningdirekt/#lantmateriet_qgis.core.clients.fastighetsindelningdirekt.RegisterenhetsOmradeWithGeometry","title":"<code>RegisterenhetsOmradeWithGeometry</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/fastighetsindelningdirekt.py</code> <pre><code>class RegisterenhetsOmradeWithGeometry(RegisterenhetsOmrade):\n    geometry: QgsReferencedGeometry\n</code></pre>"},{"location":"api-reference/gemensamhetsanlaggningdirekt/","title":"Gemensamhetsanl\u00e4ggning Direkt","text":""},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.GemensamhetsanlaggningDirektClient","title":"GemensamhetsanlaggningDirektClient","text":"<p>Client for the Gemensamhetsanl\u00e4ggning Direkt API.</p> Source code in <code>lantmateriet_qgis/core/clients/gemensamhetsanlaggningdirekt.py</code> <pre><code>class GemensamhetsanlaggningDirektClient(BaseClient):\n    \"\"\"Client for the Gemensamhetsanl\u00e4ggning Direkt API.\"\"\"\n\n    base_path = \"/distribution/produkter/gemensamhetsanlaggning/v2.1\"\n\n    @classmethod\n    def _handle_results(\n        cls,\n        _include: IncludableData | Iterable[IncludableData] | None,\n        srid: QgsCoordinateReferenceSystem | None,\n        results: list[dict],\n    ) -&gt; list[dict]:\n        return [\n            from_feature(result, srid or QgsCoordinateReferenceSystem.fromEpsgId(3006))\n            for result in results[\"features\"]\n        ]\n\n    def get_one(\n        self,\n        id: str | UUID | QUuid,\n        include: IncludableData | Iterable[IncludableData] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; dict:\n        \"\"\"Get a single gemensamhetsanl\u00e4ggning.\"\"\"\n        query = QUrlQuery()\n        if isinstance(include, str):\n            query.addQueryItem(\"includeData\", include)\n        elif include is not None:\n            query.addQueryItem(\"includeData\", \",\".join(include))\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n        return self._handle_results(include, srid, result)[0]\n\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        include: IncludableData | Iterable[IncludableData] | None = None,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[dict]:\n        \"\"\"Get multiple gemensamhetsanl\u00e4ggningar.\"\"\"\n\n        query = QUrlQuery()\n        query.addQueryItem(\"includeData\", include or \"basinformation\")\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        ids = [coerce_uuid_to_str(id) for id in ids]\n        results = self._post(\"/\", query, ids)\n        return self._handle_results(include, srid, results)\n\n    def get_references_from_text(\n        self, text: str\n    ) -&gt; list[GemensamhetsanlaggningsReference]:\n        \"\"\"Get references to gemensamhetsanl\u00e4ggningar from their aktbeteckning.\"\"\"\n\n        query = QUrlQuery()\n        query.addQueryItem(\"aktbeteckning\", text)\n\n        result = self._get(\"/referens/aktbeteckning\", query)\n        return [GemensamhetsanlaggningsReference(**item) for item in result]\n\n    def get_references_from_delagande(\n        self, registerenhet: str | UUID | QUuid\n    ) -&gt; list[GemensamhetsanlaggningsReference]:\n        \"\"\"Get references to gemensamhetsanl\u00e4ggningar which the given property is a member of.\"\"\"\n\n        result = self._get(\n            f\"/referens/delagande/{coerce_uuid_to_str(registerenhet)}\", QUrlQuery()\n        )\n        return [GemensamhetsanlaggningsReference(**item) for item in result]\n\n    def get_references_from_geometry(\n        self, geometry: QgsGeometry | QgsReferencedGeometry, buffer: int = 0\n    ) -&gt; list[GemensamhetsanlaggningsReference]:\n        \"\"\"Get references to gemensamhetsanl\u00e4ggningar within the given geometry, or within a buffer distance of it.\"\"\"\n\n        query = QUrlQuery()\n        if isinstance(geometry, QgsReferencedGeometry):\n            if not is_supported_crs(geometry.crs()):\n                transformer = QgsCoordinateTransform(\n                    geometry.crs(),\n                    QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                    QgsProject.instance().transformContext(),\n                )\n                geometry.transform(transformer)\n                geometry = QgsReferencedGeometry(\n                    geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n                )\n        else:\n            geometry = QgsReferencedGeometry(\n                geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n\n        data = json.loads(geometry.asJson())\n        data[\"crs\"] = {\n            \"type\": \"name\",\n            \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n        }\n        data = {\"geometri\": data, \"buffer\": buffer}\n\n        result = self._post(\"/referens/geometri\", query, data)\n        if result is None:\n            raise ValueError(\"Error retrieving references\")\n        return [GemensamhetsanlaggningsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.GemensamhetsanlaggningDirektClient.get_one","title":"get_one","text":"<pre><code>get_one(\n    id: str | UUID | QUuid,\n    include: IncludableData\n    | Iterable[IncludableData]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; dict\n</code></pre> <p>Get a single gemensamhetsanl\u00e4ggning.</p> Source code in <code>lantmateriet_qgis/core/clients/gemensamhetsanlaggningdirekt.py</code> <pre><code>def get_one(\n    self,\n    id: str | UUID | QUuid,\n    include: IncludableData | Iterable[IncludableData] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; dict:\n    \"\"\"Get a single gemensamhetsanl\u00e4ggning.\"\"\"\n    query = QUrlQuery()\n    if isinstance(include, str):\n        query.addQueryItem(\"includeData\", include)\n    elif include is not None:\n        query.addQueryItem(\"includeData\", \",\".join(include))\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n    return self._handle_results(include, srid, result)[0]\n</code></pre>"},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.GemensamhetsanlaggningDirektClient.get_many","title":"get_many","text":"<pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    include: IncludableData\n    | Iterable[IncludableData]\n    | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[dict]\n</code></pre> <p>Get multiple gemensamhetsanl\u00e4ggningar.</p> Source code in <code>lantmateriet_qgis/core/clients/gemensamhetsanlaggningdirekt.py</code> <pre><code>def get_many(\n    self,\n    ids: list[str | UUID | QUuid],\n    include: IncludableData | Iterable[IncludableData] | None = None,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[dict]:\n    \"\"\"Get multiple gemensamhetsanl\u00e4ggningar.\"\"\"\n\n    query = QUrlQuery()\n    query.addQueryItem(\"includeData\", include or \"basinformation\")\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    ids = [coerce_uuid_to_str(id) for id in ids]\n    results = self._post(\"/\", query, ids)\n    return self._handle_results(include, srid, results)\n</code></pre>"},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.GemensamhetsanlaggningDirektClient.get_references_from_text","title":"get_references_from_text","text":"<pre><code>get_references_from_text(\n    text: str,\n) -&gt; list[GemensamhetsanlaggningsReference]\n</code></pre> <p>Get references to gemensamhetsanl\u00e4ggningar from their aktbeteckning.</p> Source code in <code>lantmateriet_qgis/core/clients/gemensamhetsanlaggningdirekt.py</code> <pre><code>def get_references_from_text(\n    self, text: str\n) -&gt; list[GemensamhetsanlaggningsReference]:\n    \"\"\"Get references to gemensamhetsanl\u00e4ggningar from their aktbeteckning.\"\"\"\n\n    query = QUrlQuery()\n    query.addQueryItem(\"aktbeteckning\", text)\n\n    result = self._get(\"/referens/aktbeteckning\", query)\n    return [GemensamhetsanlaggningsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.GemensamhetsanlaggningDirektClient.get_references_from_delagande","title":"get_references_from_delagande","text":"<pre><code>get_references_from_delagande(\n    registerenhet: str | UUID | QUuid,\n) -&gt; list[GemensamhetsanlaggningsReference]\n</code></pre> <p>Get references to gemensamhetsanl\u00e4ggningar which the given property is a member of.</p> Source code in <code>lantmateriet_qgis/core/clients/gemensamhetsanlaggningdirekt.py</code> <pre><code>def get_references_from_delagande(\n    self, registerenhet: str | UUID | QUuid\n) -&gt; list[GemensamhetsanlaggningsReference]:\n    \"\"\"Get references to gemensamhetsanl\u00e4ggningar which the given property is a member of.\"\"\"\n\n    result = self._get(\n        f\"/referens/delagande/{coerce_uuid_to_str(registerenhet)}\", QUrlQuery()\n    )\n    return [GemensamhetsanlaggningsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.GemensamhetsanlaggningDirektClient.get_references_from_geometry","title":"get_references_from_geometry","text":"<pre><code>get_references_from_geometry(\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n) -&gt; list[GemensamhetsanlaggningsReference]\n</code></pre> <p>Get references to gemensamhetsanl\u00e4ggningar within the given geometry, or within a buffer distance of it.</p> Source code in <code>lantmateriet_qgis/core/clients/gemensamhetsanlaggningdirekt.py</code> <pre><code>def get_references_from_geometry(\n    self, geometry: QgsGeometry | QgsReferencedGeometry, buffer: int = 0\n) -&gt; list[GemensamhetsanlaggningsReference]:\n    \"\"\"Get references to gemensamhetsanl\u00e4ggningar within the given geometry, or within a buffer distance of it.\"\"\"\n\n    query = QUrlQuery()\n    if isinstance(geometry, QgsReferencedGeometry):\n        if not is_supported_crs(geometry.crs()):\n            transformer = QgsCoordinateTransform(\n                geometry.crs(),\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            geometry.transform(transformer)\n            geometry = QgsReferencedGeometry(\n                geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n    else:\n        geometry = QgsReferencedGeometry(\n            geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n        )\n\n    data = json.loads(geometry.asJson())\n    data[\"crs\"] = {\n        \"type\": \"name\",\n        \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n    }\n    data = {\"geometri\": data, \"buffer\": buffer}\n\n    result = self._post(\"/referens/geometri\", query, data)\n    if result is None:\n        raise ValueError(\"Error retrieving references\")\n    return [GemensamhetsanlaggningsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/gemensamhetsanlaggningdirekt/#data-types","title":"Data Types","text":""},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.gemensamhetsanlaggningdirekt.IncludableData","title":"<code>IncludableData = Literal['basinformation', 'atgard', 'beteckningForeReformen', 'andel', 'geometri', 'total']</code>  <code>module-attribute</code>","text":""},{"location":"api-reference/gemensamhetsanlaggningdirekt/#lantmateriet_qgis.core.clients.gemensamhetsanlaggningdirekt.GemensamhetsanlaggningsReference","title":"<code>GemensamhetsanlaggningsReference</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/gemensamhetsanlaggningdirekt.py</code> <pre><code>class GemensamhetsanlaggningsReference(TypedDict):\n    objektidentitet: str\n    beteckning: str\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/","title":"Registerbeteckning Direkt","text":""},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient","title":"RegisterbeteckningDirektClient","text":"<p>Client for the Registerbeteckning Direkt API.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>class RegisterbeteckningDirektClient(BaseClient):\n    \"\"\"Client for the Registerbeteckning Direkt API.\"\"\"\n\n    base_path = \"/distribution/produkter/registerbeteckning/v5\"\n\n    @classmethod\n    def _handle_results(\n        cls, srid: QgsCoordinateReferenceSystem | None, results: list[dict]\n    ) -&gt; list[dict]:\n        return [\n            from_feature(result, srid or QgsCoordinateReferenceSystem.fromEpsgId(3006))\n            for result in results[\"features\"]\n        ]\n\n    def get_one(\n        self, id: str | UUID | QUuid, srid: QgsCoordinateReferenceSystem | None = None\n    ) -&gt; Beteckning:\n        \"\"\"Resolve a single designation.\"\"\"\n        query = QUrlQuery()\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n        return self._handle_results(srid, result)[0]\n\n    def get_many(\n        self,\n        ids: list[str | UUID | QUuid],\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[Beteckning]:\n        \"\"\"Resolve multiple designations.\"\"\"\n        query = QUrlQuery()\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        ids = [coerce_uuid_to_str(id) for id in ids]\n        results = self._post(\"/\", query, ids)\n        return self._handle_results(srid, results)\n\n    def get_by_name(\n        self, name: str | list[str], srid: QgsCoordinateReferenceSystem | None = None\n    ) -&gt; list[Beteckning]:\n        \"\"\"Find designations matching a given name.\"\"\"\n        query = QUrlQuery()\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        if isinstance(name, str):\n            query.addQueryItem(\"namn\", name)\n            result = self._get(\"/namn\", query)\n        else:\n            result = self._post(\"/namn\", query, name)\n        return self._handle_results(srid, result)\n\n    def get_by_belongs_to(\n        self,\n        belongs_to: str | UUID | QUuid,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[Beteckning]:\n        \"\"\"Find designations belonging to a given object.\"\"\"\n        query = QUrlQuery()\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        result = self._get(f\"/tillhor/{coerce_uuid_to_str(belongs_to)}\", query)\n        return self._handle_results(srid, result)\n\n    def get_by_point(\n        self,\n        point: QgsGeometry | QgsReferencedGeometry,\n        srid: QgsCoordinateReferenceSystem | None = None,\n    ) -&gt; list[Beteckning]:\n        \"\"\"Find designations overlapping a given point.\"\"\"\n\n        query = QUrlQuery()\n        if srid is not None:\n            query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n        if isinstance(point, QgsReferencedGeometry):\n            if is_supported_crs(point.crs()):\n                query.addQueryItem(\"punktSrid\", str(coerce_crs(point.crs())))\n            else:\n                transformer = QgsCoordinateTransform(\n                    point.crs(),\n                    QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                    QgsProject.instance().transformContext(),\n                )\n                point.transform(transformer)\n        try:\n            point: QgsPointXY = point.asPoint()\n        except TypeError:\n            raise ValueError(\"Invalid geometry type. Expected a point.\")\n        query.addQueryItem(\"koordinater\", f\"{point.y()},{point.x()}\")\n\n        result = self._get(\"/punkt\", query)\n        return self._handle_results(srid, result)\n\n    def get_references_from_text(\n        self,\n        text: str,\n        municipality_or_lan: str | None = None,\n        status: Literal[\"g\u00e4llande\", \"ledig\", \"omregistrerad\", \"reserverad\", \"sp\u00e4rrad\"]\n        | None = None,\n        objektstatus: Literal[\"levande\", \"avregistrerad\"] | None = None,\n        max_hits: int = 100,\n    ) -&gt; list[RegisterbeteckningsReference]:\n        \"\"\"Find references to designations based on a text search.\"\"\"\n\n        query = QUrlQuery()\n        query.addQueryItem(\"beteckning\", text)\n        if municipality_or_lan is not None:\n            if len(municipality_or_lan) != 2:\n                query.addQueryItem(\"kommunkod\", municipality_or_lan)\n            else:\n                query.addQueryItem(\"lankod\", municipality_or_lan)\n\n        if status is not None:\n            query.addQueryItem(\"status\", status)\n        if objektstatus is not None:\n            query.addQueryItem(\"objektstatus\", objektstatus)\n        query.addQueryItem(\"maxHits\", str(max_hits))\n\n        result = self._get(\"/referens/fritext\", query)\n        return [RegisterbeteckningsReference(**item) for item in result]\n\n    def get_references_from_geometry(\n        self,\n        geometry: QgsGeometry | QgsReferencedGeometry,\n        buffer: int = 0,\n        status: Literal[\"g\u00e4llande\", \"ledig\", \"omregistrerad\", \"reserverad\", \"sp\u00e4rrad\"]\n        | None = None,\n    ) -&gt; list[RegisterbeteckningsReference]:\n        \"\"\"Find references to designations within a given geometry, or within a buffer distance thereof.\"\"\"\n\n        query = QUrlQuery()\n        if isinstance(geometry, QgsReferencedGeometry):\n            if not is_supported_crs(geometry.crs()):\n                transformer = QgsCoordinateTransform(\n                    geometry.crs(),\n                    QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                    QgsProject.instance().transformContext(),\n                )\n                geometry.transform(transformer)\n                geometry = QgsReferencedGeometry(\n                    geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n                )\n        else:\n            geometry = QgsReferencedGeometry(\n                geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n        if status is not None:\n            query.addQueryItem(\"status\", status)\n\n        data = json.loads(geometry.asJson())\n        data[\"crs\"] = {\n            \"type\": \"name\",\n            \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n        }\n        data = {\"geometri\": data, \"buffer\": buffer}\n\n        result = self._post(\"/referens/geometri\", query, data)\n        if result is None:\n            raise ValueError(\"Error retrieving references\")\n        return [RegisterbeteckningsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient.get_one","title":"get_one","text":"<pre><code>get_one(\n    id: str | UUID | QUuid,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; Beteckning\n</code></pre> <p>Resolve a single designation.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>def get_one(\n    self, id: str | UUID | QUuid, srid: QgsCoordinateReferenceSystem | None = None\n) -&gt; Beteckning:\n    \"\"\"Resolve a single designation.\"\"\"\n    query = QUrlQuery()\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    result = self._get(f\"/{coerce_uuid_to_str(id)}\", query)\n    return self._handle_results(srid, result)[0]\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient.get_many","title":"get_many","text":"<pre><code>get_many(\n    ids: list[str | UUID | QUuid],\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[Beteckning]\n</code></pre> <p>Resolve multiple designations.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>def get_many(\n    self,\n    ids: list[str | UUID | QUuid],\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[Beteckning]:\n    \"\"\"Resolve multiple designations.\"\"\"\n    query = QUrlQuery()\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    ids = [coerce_uuid_to_str(id) for id in ids]\n    results = self._post(\"/\", query, ids)\n    return self._handle_results(srid, results)\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(\n    name: str | list[str],\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[Beteckning]\n</code></pre> <p>Find designations matching a given name.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>def get_by_name(\n    self, name: str | list[str], srid: QgsCoordinateReferenceSystem | None = None\n) -&gt; list[Beteckning]:\n    \"\"\"Find designations matching a given name.\"\"\"\n    query = QUrlQuery()\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    if isinstance(name, str):\n        query.addQueryItem(\"namn\", name)\n        result = self._get(\"/namn\", query)\n    else:\n        result = self._post(\"/namn\", query, name)\n    return self._handle_results(srid, result)\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient.get_by_belongs_to","title":"get_by_belongs_to","text":"<pre><code>get_by_belongs_to(\n    belongs_to: str | UUID | QUuid,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[Beteckning]\n</code></pre> <p>Find designations belonging to a given object.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>def get_by_belongs_to(\n    self,\n    belongs_to: str | UUID | QUuid,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[Beteckning]:\n    \"\"\"Find designations belonging to a given object.\"\"\"\n    query = QUrlQuery()\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    result = self._get(f\"/tillhor/{coerce_uuid_to_str(belongs_to)}\", query)\n    return self._handle_results(srid, result)\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient.get_by_point","title":"get_by_point","text":"<pre><code>get_by_point(\n    point: QgsGeometry | QgsReferencedGeometry,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[Beteckning]\n</code></pre> <p>Find designations overlapping a given point.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>def get_by_point(\n    self,\n    point: QgsGeometry | QgsReferencedGeometry,\n    srid: QgsCoordinateReferenceSystem | None = None,\n) -&gt; list[Beteckning]:\n    \"\"\"Find designations overlapping a given point.\"\"\"\n\n    query = QUrlQuery()\n    if srid is not None:\n        query.addQueryItem(\"srid\", str(coerce_crs(srid)))\n\n    if isinstance(point, QgsReferencedGeometry):\n        if is_supported_crs(point.crs()):\n            query.addQueryItem(\"punktSrid\", str(coerce_crs(point.crs())))\n        else:\n            transformer = QgsCoordinateTransform(\n                point.crs(),\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            point.transform(transformer)\n    try:\n        point: QgsPointXY = point.asPoint()\n    except TypeError:\n        raise ValueError(\"Invalid geometry type. Expected a point.\")\n    query.addQueryItem(\"koordinater\", f\"{point.y()},{point.x()}\")\n\n    result = self._get(\"/punkt\", query)\n    return self._handle_results(srid, result)\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient.get_references_from_text","title":"get_references_from_text","text":"<pre><code>get_references_from_text(\n    text: str,\n    municipality_or_lan: str | None = None,\n    status: Literal[\n        \"g\u00e4llande\",\n        \"ledig\",\n        \"omregistrerad\",\n        \"reserverad\",\n        \"sp\u00e4rrad\",\n    ]\n    | None = None,\n    objektstatus: Literal[\"levande\", \"avregistrerad\"]\n    | None = None,\n    max_hits: int = 100,\n) -&gt; list[RegisterbeteckningsReference]\n</code></pre> <p>Find references to designations based on a text search.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>def get_references_from_text(\n    self,\n    text: str,\n    municipality_or_lan: str | None = None,\n    status: Literal[\"g\u00e4llande\", \"ledig\", \"omregistrerad\", \"reserverad\", \"sp\u00e4rrad\"]\n    | None = None,\n    objektstatus: Literal[\"levande\", \"avregistrerad\"] | None = None,\n    max_hits: int = 100,\n) -&gt; list[RegisterbeteckningsReference]:\n    \"\"\"Find references to designations based on a text search.\"\"\"\n\n    query = QUrlQuery()\n    query.addQueryItem(\"beteckning\", text)\n    if municipality_or_lan is not None:\n        if len(municipality_or_lan) != 2:\n            query.addQueryItem(\"kommunkod\", municipality_or_lan)\n        else:\n            query.addQueryItem(\"lankod\", municipality_or_lan)\n\n    if status is not None:\n        query.addQueryItem(\"status\", status)\n    if objektstatus is not None:\n        query.addQueryItem(\"objektstatus\", objektstatus)\n    query.addQueryItem(\"maxHits\", str(max_hits))\n\n    result = self._get(\"/referens/fritext\", query)\n    return [RegisterbeteckningsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.RegisterbeteckningDirektClient.get_references_from_geometry","title":"get_references_from_geometry","text":"<pre><code>get_references_from_geometry(\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n    status: Literal[\n        \"g\u00e4llande\",\n        \"ledig\",\n        \"omregistrerad\",\n        \"reserverad\",\n        \"sp\u00e4rrad\",\n    ]\n    | None = None,\n) -&gt; list[RegisterbeteckningsReference]\n</code></pre> <p>Find references to designations within a given geometry, or within a buffer distance thereof.</p> Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>def get_references_from_geometry(\n    self,\n    geometry: QgsGeometry | QgsReferencedGeometry,\n    buffer: int = 0,\n    status: Literal[\"g\u00e4llande\", \"ledig\", \"omregistrerad\", \"reserverad\", \"sp\u00e4rrad\"]\n    | None = None,\n) -&gt; list[RegisterbeteckningsReference]:\n    \"\"\"Find references to designations within a given geometry, or within a buffer distance thereof.\"\"\"\n\n    query = QUrlQuery()\n    if isinstance(geometry, QgsReferencedGeometry):\n        if not is_supported_crs(geometry.crs()):\n            transformer = QgsCoordinateTransform(\n                geometry.crs(),\n                QgsCoordinateReferenceSystem.fromEpsgId(3006),\n                QgsProject.instance().transformContext(),\n            )\n            geometry.transform(transformer)\n            geometry = QgsReferencedGeometry(\n                geometry.geometry(), QgsCoordinateReferenceSystem.fromEpsgId(3006)\n            )\n    else:\n        geometry = QgsReferencedGeometry(\n            geometry, QgsCoordinateReferenceSystem.fromEpsgId(3006)\n        )\n    if status is not None:\n        query.addQueryItem(\"status\", status)\n\n    data = json.loads(geometry.asJson())\n    data[\"crs\"] = {\n        \"type\": \"name\",\n        \"properties\": {\"name\": geometry.crs().toOgcUrn()},\n    }\n    data = {\"geometri\": data, \"buffer\": buffer}\n\n    result = self._post(\"/referens/geometri\", query, data)\n    if result is None:\n        raise ValueError(\"Error retrieving references\")\n    return [RegisterbeteckningsReference(**item) for item in result]\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#data-types","title":"Data Types","text":""},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.registerbeteckningdirekt.Beteckning","title":"<code>Beteckning</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>class Beteckning(TypedDict):\n    registerenhetsreferens: RegisterenhetsReference\n    gemensamhetsanlaggningsreferens: GemensamhetsanlaggningsReference\n    registerbeteckning: list[Registerbeteckning]\n    aldreRegisterbeteckning: list[dict]\n    aldreTidigareRegisterbeteckning: list[dict]\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.registerbeteckningdirekt.RegisterenhetsReference","title":"<code>RegisterenhetsReference</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>class RegisterenhetsReference(TypedDict):\n    objektidentitet: str\n    objektstatus: Literal[\"avregistrerad\", \"levande\"]\n    typ: Literal[\"Fastighet\", \"Samf\u00e4llighet\"]\n    registerenhetsomrade: list[Registerenhetsomrade] | None\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.registerbeteckningdirekt.GemensamhetsanlaggningsReference","title":"<code>GemensamhetsanlaggningsReference</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>class GemensamhetsanlaggningsReference(TypedDict):\n    objektidentitet: str\n    objektstatus: Literal[\"avregistrerad\", \"levande\"]\n    registerenhetsomrade: list[Registerenhetsomrade] | None\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.registerbeteckningdirekt.Registerbeteckning","title":"<code>Registerbeteckning</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>class Registerbeteckning(Utbytesobjekt):\n    markering: bool | None\n    registeromrade: str\n    trakt: str\n    block: str | None\n    enhet: int\n    beteckningsstatus: Literal[\n        \"g\u00e4llande\", \"ledig\", \"omregistrerad\", \"reserverad\", \"sp\u00e4rrad\"\n    ]\n    omregistreringsdatum: str | None\n    omregistreringsaktbeteckning: str | None\n    omregistreradTill: str | None\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.registerbeteckningdirekt.Registerenhetsomrade","title":"<code>Registerenhetsomrade</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>class Registerenhetsomrade(TypedDict):\n    omradesnummer: int\n    markering: bool | None\n    centralpunktskoordinat: dict | None\n</code></pre>"},{"location":"api-reference/registerbeteckningdirekt/#lantmateriet_qgis.core.clients.registerbeteckningdirekt.RegisterbeteckningsReference","title":"<code>RegisterbeteckningsReference</code>","text":"Source code in <code>lantmateriet_qgis/core/clients/registerbeteckningdirekt.py</code> <pre><code>class RegisterbeteckningsReference(TypedDict):\n    objektidentitet: str\n    registerenhet: str | None\n    registerenhetstyp: Literal[\"Fastighet\", \"Samf\u00e4llighet\"] | None\n    gemensamhetsanlaggning: str | None\n    beteckning: str\n</code></pre>"},{"location":"development/contribute/","title":"Contributing Guidelines","text":"<p>First off, thanks for considering to contribute to this project!</p> <p>These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.</p>"},{"location":"development/contribute/#git-hooks","title":"Git hooks","text":"<p>We use git hooks through pre-commit to enforce and automatically check some \"rules\". Please install them (<code>pre-commit install</code>) before to push any commit.</p> <p>See the relevant configuration file: <code>.pre-commit-config.yaml</code>.</p>"},{"location":"development/contribute/#code-style","title":"Code Style","text":"<p>Make sure your code roughly follows PEP-8 and keeps things consistent with the rest of the code:</p> <ul> <li>docstrings: sphinx-style is used to write technical documentation.</li> <li>formatting: black is used to automatically format the code without debate.</li> <li>sorted imports: isort is used to sort imports</li> <li>static analisis: flake8 and PyLint are used to catch some dizziness and keep the source code healthy.</li> </ul>"},{"location":"development/documentation/","title":"Documentation","text":"<p>This project uses MkDocs to generate documentation from Markdown pages and docstrings (documentation in-code).</p>"},{"location":"development/documentation/#build-documentation-website","title":"Build documentation website","text":"<p>To build it:</p> <pre><code>uvx --with-requirements requirements/documentation.txt mkdocs build\n</code></pre> <p>Then open <code>site/index.html</code> in a web browser.</p>"},{"location":"development/documentation/#write-documentation-using-live-render","title":"Write documentation using live render","text":"<pre><code>uvx --with-requirements requirements/documentation.txt mkdocs serve\n</code></pre> <p>Then open http://localhost:8000/lantmateriet-qgis-plugin in a web browser to see the HTML render updated when a file is saved.</p>"},{"location":"development/environment/","title":"Development","text":""},{"location":"development/environment/#environment-setup","title":"Environment setup","text":"<p>Typically on Ubuntu:</p> <pre><code># create virtual environment linking to system packages (for pyqgis)\npython3 -m venv .venv --system-site-packages\nsource .venv/bin/activate\n\n# bump dependencies inside venv\npython -m pip install -U pip\npython -m pip install -U -r requirements/development.txt\n\n# install git hooks (pre-commit)\npre-commit install\n</code></pre>"},{"location":"development/history/","title":"History","text":"<p><code>{include} ../../CHANGELOG.md</code></p>"},{"location":"development/packaging/","title":"Packaging and deployment","text":""},{"location":"development/packaging/#packaging","title":"Packaging","text":"<p>This plugin is using the qgis-plugin-ci tool to perform packaging operations. Under the hood, the package command is performing a <code>git archive</code> run based on <code>CHANGELOG.md</code>.</p> <p>Use it like so:</p> <pre><code># package a specific version\nuvx --with-requirements requirements/packaging.txt qgis-plugin-ci package 1.3.1\n# package latest version\nuvx --with-requirements requirements/packaging.txt qgis-plugin-ci package latest\n</code></pre>"},{"location":"development/packaging/#release-a-version","title":"Release a version","text":"<p>Through git workflow:</p> <ol> <li>Add the new version to the <code>CHANGELOG.md</code></li> <li>Optionally change the version number in <code>metadata.txt</code></li> <li>Apply a git tag with the relevant version: <code>git tag -a X.y.z {git commit hash} -m \"This version rocks!\"</code></li> <li>Push tag to main branch: <code>git push origin X.y.z</code></li> </ol>"},{"location":"development/testing/","title":"Testing the plugin","text":"<p>Tests are written in 2 separate folders:</p> <ul> <li><code>tests/unit</code>: testing code which is independent of QGIS API</li> <li><code>tests/qgis</code>: testing code which depends on QGIS API</li> </ul>"},{"location":"development/testing/#requirements","title":"Requirements","text":"<ul> <li>3.34 &lt; QGIS &lt; 3.99</li> </ul> <pre><code>python -m pip install -U -r requirements/testing.txt\n</code></pre>"},{"location":"development/testing/#run-unit-tests","title":"Run unit tests","text":"<pre><code># run all tests with PyTest and Coverage report\npython -m pytest\n\n# run only unit tests with pytest launcher (disabling pytest-qgis)\npython -m pytest -p no:qgis tests/unit\n\n# run only QGIS tests with pytest launcher\npython -m pytest tests/qgis\n\n# run a specific test module using standard unittest\npython -m unittest tests.unit.test_plg_metadata\n\n# run a specific test function using standard unittest\npython -m unittest tests.unit.test_plg_metadata.TestPluginMetadata.test_version_semver\n</code></pre>"},{"location":"development/translation/","title":"Manage translations","text":""},{"location":"development/translation/#requirements","title":"Requirements","text":"<p>Qt Linguist tools are used to manage translations. Typically on Ubuntu:</p> <pre><code>sudo apt install qttools5-dev-tools\n</code></pre>"},{"location":"development/translation/#workflow","title":"Workflow","text":"<ol> <li> <p>Update <code>.ts</code> files:</p> <pre><code>pylupdate5 -noobsolete -verbose lantmateriet_qgis/resources/i18n/plugin_translation.pro\n</code></pre> </li> <li> <p>Translate your text using QLinguist or directly into <code>.ts</code> files.</p> </li> <li> <p>Compile it:</p> <pre><code>lrelease lantmateriet_qgis/resources/i18n/*.ts\n</code></pre> </li> </ol>"},{"location":"usage/","title":"Anv\u00e4ndning","text":"<ul> <li> <p> S\u00f6k p\u00e5 fastigheter och adresser</p> <p>Anv\u00e4nd QGIS inbyggda s\u00f6kruta f\u00f6r att s\u00f6ka p\u00e5 beteckningar p\u00e5 adresser, fastigheter, samf\u00e4lligheter och gemensamhetsanl\u00e4ggningar</p> <p> S\u00f6kning</p> </li> <li> <p> Ladda ner fastigheter och adresser</p> <p>Ladda ner fastigheter och adresser inom avgr\u00e4nsade omr\u00e5den, eller bygg avancerade fl\u00f6den som anv\u00e4nder fastighets- och adressinformation med modellbyggaren</p> <p> Algoritmer</p> </li> <li> <p> Anv\u00e4nd uttryck f\u00f6r att stils\u00e4ttning och etiketter</p> <p>H\u00e4mta information om fastigheter och adresser i QGIS kraftfulla uttrycksmotor, f\u00f6r stils\u00e4ttning, etiketter, m.m.</p> <p> Uttryck</p> </li> <li> <p> Anslut till Lantm\u00e4teriets tj\u00e4nster</p> <p>Anslut enkelt till Lantm\u00e4teriets tj\u00e4nster utan att manuellt hantera URLer och konfiguration</p> <p> Anslutningar</p> </li> </ul>"},{"location":"usage/installation/","title":"Installation","text":""},{"location":"usage/installation/#stabil-version-rekommenderad","title":"Stabil version (rekommenderad)","text":"<p>Detta plugin finns i officiella QGIS-pluginkatalogen: https://plugins.qgis.org/plugins/lantmateriet_qgis/</p> <p>Du kan installera det direkt fr\u00e5n QGIS-pluginhanteraren:</p> <p>TODO: screenshot</p>"},{"location":"usage/installation/#betaversioner","title":"Betaversioner","text":"<p>Betaversioner kan installeras genom att aktivera experimentella till\u00e4gg i QGIS-pluginhanterarens inst\u00e4llningar.</p>"},{"location":"usage/installation/#utvecklingsversioner","title":"Utvecklingsversioner","text":"<p>Alla kod\u00e4ndringar i main-branchen byggs automatiskt. Genom att l\u00e4gga till f\u00f6ljande URL i QGIS-pluginhanterarens inst\u00e4llningar kan du installera den senaste utvecklingsversionen:</p> <pre><code>https://github.com/qgissverige/lantmateriet-qgis-plugin/plugins.xml\n</code></pre> <p>Men kom ih\u00e5g att dessa versioner riskerar att ha stora buggar och vara allm\u00e4nt instabila.</p>"},{"location":"usage/installningar/","title":"Inst\u00e4llningar","text":"<p>Pluginets inst\u00e4llningar n\u00e5s via QGIS inst\u00e4llningsdialog, p\u00e5 sidan \"Lantm\u00e4teriet\".</p>"},{"location":"usage/installningar/#oversikt","title":"\u00d6versikt","text":"<p>Inst\u00e4llningarna best\u00e5r av tre sektioner:</p> <ul> <li>Nationella geodataplattformen (NGP)</li> <li>\u00d6vriga tj\u00e4nster</li> <li>Kommandon (knappar)</li> </ul> <p></p>"},{"location":"usage/installningar/#installningar-for-anslutning","title":"Inst\u00e4llningar f\u00f6r anslutning","text":"<p>F\u00f6r b\u00e5de NGP och \u00f6vriga tj\u00e4nster anges tj\u00e4nstens bas-URL, antingen genom att v\u00e4lja n\u00e5gon av Lantm\u00e4teriets milj\u00f6er som d\u00e5 anv\u00e4nder de f\u00f6rkonfigurerade URL:erna, eller genom att ange en egen URL. Att ange en egen URL kan t.ex. vara aktuellt om man har en proxy i sin organisation via vilken trafik till Lantm\u00e4teriets tj\u00e4nster ska g\u00e5.</p> <p>Dessutom anges den autentisering som ska anv\u00e4ndas. F\u00f6r Lantm\u00e4teriets milj\u00f6er beh\u00f6ver detta vara antingen OAuth 2 (standard f\u00f6r organisationer) eller Basic Auth (standard f\u00f6r privatpersoner). F\u00f6r intern proxy g\u00e5r det att v\u00e4lja valfri autentiseringsmetod som QGIS st\u00f6djer, eller ingen autentisering alls.</p> <p></p>"},{"location":"usage/installningar/#val-av-ovriga-tjanster","title":"Val av \u00f6vriga tj\u00e4nster","text":"<p>F\u00f6r \u00f6vriga tj\u00e4nster beh\u00f6ver du dessutom v\u00e4lja vilka tj\u00e4nster du har tillg\u00e5ng till. Valet h\u00e4r p\u00e5verkar vilka funktioner du kommer ha tillg\u00e4ngligt, och vilka tj\u00e4nster som anv\u00e4nds n\u00e4r det finns flera alternativ.</p>"},{"location":"usage/installningar/#oauth-2-installningar","title":"OAuth 2-inst\u00e4llningar","text":"<p>D\u00e5 autentisering via OAuth 2 kr\u00e4ver en del konfiguration finns ett smidigt fl\u00f6de som sk\u00f6ter denna konfiguration. Anv\u00e4nd knappen \"Ange \u00e5tkomstnycklar\" och ange i rutan som kommer upp dina \u00e5tkomstnycklar som du f\u00e5r fr\u00e5n Lantm\u00e4teriets API-manager.</p> <p></p> <p>Pluginet skapar d\u00e5 upp en passande OAuth 2-konfiguration. Om du anv\u00e4nder QGIS 3.44 eller senare anv\u00e4nds Client Credentials fl\u00f6det, vilket inte kr\u00e4ver anv\u00e4ndarnamn och l\u00f6senord. F\u00f6r versioner innan 3.44 anv\u00e4nds Authorization Code-fl\u00f6det, som kommer \u00f6ppna en webbl\u00e4sare d\u00e4r du f\u00e5r logga in med ditt Lantm\u00e4teriet-konto.</p> <p>Det g\u00e5r \u00e4ven bra att anv\u00e4nda en befintlig OAuth 2-konfiguration, t.ex. om du har en s\u00e5dan i QGIS sedan tidigare.</p> <p> Mer om \u00e5tkomstnycklar</p>"},{"location":"usage/installningar/#kommandon","title":"Kommandon","text":"<p>I inst\u00e4llningsdialogen finns \u00e4ven n\u00e5gra knappar f\u00f6r att k\u00f6ra olika kommandon.</p>"},{"location":"usage/installningar/#verifiering-av-konfigurationen","title":"Verifiering av konfigurationen","text":"<p>Den f\u00f6rsta knappen \"Verifiera konfiguration\" kontrollerar att den aktuella konfigurationen \u00e4r korrekt.</p>"},{"location":"usage/installningar/#lagg-till-tjanster-i-datakallor","title":"L\u00e4gg till tj\u00e4nster i Datak\u00e4llor","text":"<p>Med andra knappen, \"L\u00e4gg till tj\u00e4nster i Datak\u00e4llor\", kan du l\u00e4gga till de tj\u00e4nster som \u00e4r konfigurerade i pluginet som datak\u00e4llor i QGIS.</p>"},{"location":"usage/snabbstart/","title":"Snabbstart","text":""},{"location":"usage/snabbstart/#1-installera-pluginet","title":"1. Installera pluginet","text":"<ol> <li>\u00d6ppna pluginhanteraren i QGIS och s\u00f6k efter \"Lantm\u00e4teriets tj\u00e4nster\". Installera pluginet.</li> </ol> <p> Mer om installation</p>"},{"location":"usage/snabbstart/#2-stall-in-installningar","title":"2. St\u00e4ll in inst\u00e4llningar","text":"<ol> <li>\u00d6ppna inst\u00e4llningarna f\u00f6r QGIS (i menyn under Inst\u00e4llningar &gt; Alternativ...) och v\u00e4lj fliken Lantm\u00e4teriet</li> <li>Klicka p\u00e5 knappen Ange \u00e5tkomstnycklar i sektionen f\u00f6r Nationella geodataplattformen och/eller \u00d6vriga tj\u00e4nster</li> <li>Ange \u00e5tkomstnycklarna (client ID respektive client secret) du f\u00e5tt fr\u00e5n Lantm\u00e4teriets API-manager (instruktioner)</li> <li>Ange de \u00f6vriga tj\u00e4nster du har tillg\u00e5ng till i sektionen \u00d6vriga tj\u00e4nster</li> <li>Klicka p\u00e5 knappen Verifiera konfiguration f\u00f6r att kontrollera att allt \u00e4r korrekt inst\u00e4llt</li> </ol> <p> Mer om inst\u00e4llningar</p>"},{"location":"usage/snabbstart/#3-borja-anvanda","title":"3. B\u00f6rja anv\u00e4nda","text":""},{"location":"usage/snabbstart/#31-sok-pa-adresser-eller-fastigheter","title":"3.1. S\u00f6k p\u00e5 adresser eller fastigheter","text":"<ol> <li>Aktivera s\u00f6krutan (klicka p\u00e5 den eller med Ctrl+K)</li> <li>Skriv <code>adr</code> f\u00f6ljt av en adressbeteckning, eller <code>fgh</code> f\u00f6ljt av en fastighets-, samf\u00e4llighets- eller gemensamhetsanl\u00e4ggningsbeteckning</li> <li>Klicka p\u00e5 ett s\u00f6kresultat eller v\u00e4lj det med piltangenterna och tryck p\u00e5 Enter</li> </ol> <p> Mer om pluginets s\u00f6kningar</p> <p> Mer om s\u00f6kning i QGIS</p>"},{"location":"usage/snabbstart/#32-ladda-ned-adresser-eller-fastigheter","title":"3.2. Ladda ned adresser eller fastigheter","text":"<ol> <li>\u00d6ppna verktygsl\u00e5dan</li> <li>F\u00e4ll ut gruppen Lantm\u00e4teriet och dubbelklicka p\u00e5 n\u00e5gon av algoritmerna</li> <li>Ange n\u00f6dv\u00e4ndiga parametrar</li> <li>K\u00f6r algoritmen</li> </ol> <p> Mer om pluginets algoritmer</p> <p> Mer om att anv\u00e4nda algoritmer i QGIS</p>"},{"location":"usage/snabbstart/#33-anvand-uttryck","title":"3.3. Anv\u00e4nd uttryck","text":"<ol> <li>Hitta ett st\u00e4lle som till\u00e5ter uttryck, t.ex. i en stil eller etikett</li> <li>Klicka p\u00e5 knappen f\u00f6r att \u00f6ppna uttrycksredigeraren</li> <li>B\u00f6rja skriva ett uttryck som anv\u00e4nder n\u00e5gon av pluginets funktioner, t.ex. <code>address( @geometry )[ 'adressplatsattribut.postnummer' ]</code> f\u00f6r att f\u00e5 den n\u00e4rmaste adressens postnummer</li> </ol> <p> Mer om pluginets uttryck</p> <p> Mer om att anv\u00e4nda uttryck i QGIS</p>"},{"location":"usage/snabbstart/#34-anvand-lantmateriets-tjanster-i-qgis","title":"3.4. Anv\u00e4nd Lantm\u00e4teriets tj\u00e4nster i QGIS","text":"<ol> <li>I dialogen med inst\u00e4llningar f\u00f6r QGIS, v\u00e4lj fliken Lantm\u00e4teriet</li> <li>Klicka p\u00e5 knappen L\u00e4gg till tj\u00e4nster i Datak\u00e4llor</li> <li>I datak\u00e4llor finns nu anslutningar under STAC och WFS / OGC API Features som kan anv\u00e4ndas som vanligt i QGIS</li> </ol> <p> Mer om datak\u00e4llor i QGIS</p> <p> Mer om OGC API Features i QGIS</p>"},{"location":"usage/sokning/","title":"S\u00f6kning","text":"<p>Pluginet m\u00f6jligg\u00f6r s\u00f6kning p\u00e5 adresser samt beteckningar p\u00e5 fastigheter, samf\u00e4lligheter och gemensamhetsanl\u00e4ggningar. S\u00f6kfunktionen \u00e4r integrerad i QGIS inbyggda s\u00f6kf\u00e4lt.</p>"},{"location":"usage/sokning/#anvandning","title":"Anv\u00e4ndning","text":"<ol> <li>Aktivera s\u00f6krutan genom att klicka p\u00e5 den eller anv\u00e4nd kortkommandot Ctrl+K (eller Cmd+K p\u00e5 Mac).</li> <li>Skriv sedan in s\u00f6kningstypens prefix (<code>adr</code> eller <code>fgh</code>) eller v\u00e4lj i listan med f\u00f6rslag.</li> <li>Skriv d\u00e4refter in s\u00f6kordet (t.ex. adress eller registerbeteckning) och v\u00e4lj r\u00e4tt s\u00f6kresultat.    </li> </ol> <p>Du kommer d\u00e5 f\u00f6rflyttas till valt objekt, och objektet kommer markeras i kartan.</p> Adress\u00f6kning (Gj\u00f6rwellsgatan 22) markerad i kartan Fastighetss\u00f6kning (Stockholm Tr\u00e4ngk\u00e5ren 6) markerad i kartan"},{"location":"usage/sokning/#detaljer-om-mojliga-sokstrangar","title":"Detaljer om m\u00f6jliga s\u00f6kstr\u00e4ngar","text":"<p>Hur \"f\u00f6rl\u00e5tande\" s\u00f6kningen \u00e4r beror p\u00e5 vilken tj\u00e4nst hos Lantm\u00e4teriet som anv\u00e4nds, men som regel kr\u00e4ver s\u00f6kningen att beteckningen \u00e4r korrekt skriven, men beh\u00f6ver inte vara fullst\u00e4ndig. T.ex. ger b\u00e5de \"Tr\u00e4ngk\u00e5ren 6\" och \"Tr\u00e4ngk\u00e5r 6\" tr\u00e4ff p\u00e5 fastigheten \"Stockholm Tr\u00e4ngk\u00e5ren 6\", men \"Tr\u00e4gnk\u00e5ren 6\" ger ingen tr\u00e4ff.</p> <p>S\u00f6kningar \u00e4r inte skiftl\u00e4gesk\u00e4nslig, s\u00e5 \"Tr\u00e4ngk\u00e5ren 6\" och \"tr\u00e4ngk\u00e5ren 6\" ger samma resultat.</p> <p>M\u00e5nga adresser och fastighetsbeteckningar f\u00f6rekommer i flera kommuner i landet (och vissa adresser \u00e4ven flera g\u00e5nger inom samma kommun), du kan d\u00e4rf\u00f6r beh\u00f6va ange kommunnamnet respektive postorten f\u00f6r att f\u00e5 tr\u00e4ff p\u00e5 r\u00e4tt objekt.</p>"},{"location":"usage/sokning/#krav-pa-konfigurerade-tjanster","title":"Krav p\u00e5 konfigurerade tj\u00e4nster","text":"<p>F\u00f6ljande tj\u00e4nster beh\u00f6ver konfigureras under inst\u00e4llningar f\u00f6r respektive s\u00f6kning:</p> S\u00f6kning p\u00e5 Tj\u00e4nst Adresser Bel\u00e4genhetsadress Direkt Fastigheter och Samf\u00e4lligheter Registerbeteckning Direkt &amp; Fastighet och Samf\u00e4llighet DirektellerRegisterbeteckning Direkt &amp; Fastighetsindelning DirektellerFastighetsindelning Direkt Gemensamhetsanl\u00e4ggningar Registerbeteckning Direkt &amp; Gemensamhetsanl\u00e4ggning Direkt <p>Begr\u00e4nsningar i tj\u00e4nsten Fastighetsindelning Direkt</p> <p>Tj\u00e4nsten Fastighetsindelning Direkt \u00e4r avgiftsfri, men inneh\u00e5ller i dagsl\u00e4get ej 3D-fastigheter.</p>"},{"location":"usage/sokning/#sokinstallningar","title":"S\u00f6kinst\u00e4llningar","text":"<p>Du kan justera hur s\u00f6kningen fungerar genom att justera s\u00f6kf\u00e4ltets inst\u00e4llningar (p\u00e5 svenska heter fliken \"S\u00f6karen\").</p> <p>I inst\u00e4llningsrutan visas en rad f\u00f6r varje s\u00f6kningstyp (gemensamhetsanl\u00e4ggningar ing\u00e5r i samma som fastigheter och samf\u00e4lligheter). F\u00f6r varje rad finns tre kolumner:</p> <ul> <li>Prefix - Vad som ska skrivas f\u00f6rst i s\u00f6kf\u00e4ltet f\u00f6r att kunna s\u00f6ka p\u00e5 respektive objekttyp (normalt <code>adr</code> f\u00f6r adresser, <code>fgh</code> f\u00f6r fastigheter)</li> <li>Aktiverad - Om s\u00f6kning ska vara aktiverad f\u00f6r denna s\u00f6kningstyp</li> <li>Standard - Om aktiverat beh\u00f6ver inte prefix skrivas f\u00f6r att s\u00f6kning ska ske p\u00e5 objekttypen</li> </ul> <p></p>"},{"location":"usage/uttryck/","title":"Uttryck","text":"<p>Pluginet tillhandah\u00e5ller flera funktioner som kan anv\u00e4ndas i uttryck, t.ex. f\u00f6r stils\u00e4ttning och enklare geokodning.</p> <p>Ej l\u00e4mpligt f\u00f6r st\u00f6rre datam\u00e4ngder</p> <p>P\u00e5 grund av hur QGIS hanterar uttryck s\u00e5 \u00e4r de ej l\u00e4mpliga f\u00f6r att anv\u00e4nda p\u00e5 st\u00f6rre datam\u00e4ngder, d\u00e5 det inte finns n\u00e5gon m\u00f6jligt att batcha flera anrop till Lantm\u00e4teriets direkttj\u00e4nster. Algoritmer \u00e5 anda sidan har m\u00f6jlighet att batcha flera anrop och \u00e4r d\u00e4rf\u00f6r att f\u00f6redra f\u00f6r st\u00f6rre datam\u00e4ngder.</p> <p>Exempelvis g\u00e5r det att anv\u00e4nda uttrycken som erbjuds f\u00f6r geokodning (via den inbyggda algoritmen Geometri med uttryck), men det kommer inneb\u00e4ra m\u00e5nga fr\u00e5gor mot Lantm\u00e4teriets direkttj\u00e4nster vilket inneb\u00e4r tr\u00f6gare utf\u00f6rande.</p> <p>F\u00f6r att s\u00e4kerst\u00e4lla att uppritningen fungerar snabbt s\u00e5 kan man p\u00e5 lager med m\u00e5nga objekt anv\u00e4nda skalberoende stils\u00e4ttning genom regel-baserad stils\u00e4ttning, f\u00f6r att anv\u00e4nda symbolik utan dessa uttryck f\u00f6r mindre skalor.</p>"},{"location":"usage/uttryck/#address","title":"<code>address(geometri | id | beteckning, [kommunkod])</code>","text":"<p>H\u00e4mtar information om en adress. Funktionen kan ta olika typer av argument.</p>"},{"location":"usage/uttryck/#argument","title":"Argument","text":""},{"location":"usage/uttryck/#geometri","title":"Geometri","text":"<p>H\u00e4mtar information f\u00f6r den adress som ligger n\u00e4rmast den givna geometrin.</p>"},{"location":"usage/uttryck/#syntax","title":"Syntax","text":"<pre><code>address(geometri)\n</code></pre>"},{"location":"usage/uttryck/#argument_1","title":"Argument","text":"<pre><code>geometri</code></pre> geometri som ska s\u00f6kas i n\u00e4rheten av"},{"location":"usage/uttryck/#uuid","title":"UUID","text":"<p>H\u00e4mtar information f\u00f6r adressen med en given identitet (UUID).</p>"},{"location":"usage/uttryck/#syntax_1","title":"Syntax","text":"<pre><code>address(id)\n</code></pre>"},{"location":"usage/uttryck/#argument_2","title":"Argument","text":"<pre><code>id</code></pre> identitet f\u00f6r den adress som ska h\u00e4mtas"},{"location":"usage/uttryck/#beteckning","title":"Beteckning","text":"<p>H\u00e4mtar information f\u00f6r adressen med en given beteckning, s\u00f6kningen kan valfritt begr\u00e4nsas till en given kommunkod.</p>"},{"location":"usage/uttryck/#syntax_2","title":"Syntax","text":"<pre><code>address(beteckning, [kommunkod])\n</code></pre> <p><code>[ ]</code> markerar ett valfritt argument</p>"},{"location":"usage/uttryck/#argument_3","title":"Argument","text":"<pre><code>beteckning</code></pre> beteckning f\u00f6r den adress som ska h\u00e4mtas <pre><code>kommunkod</code></pre> kommunkod inom vilken adresser ska s\u00f6kas p\u00e5"},{"location":"usage/uttryck/#noteringar","title":"Noteringar","text":"<p>S\u00f6kning p\u00e5 beteckning utan kommunkod kan ge adresser i fel del av landet</p>"},{"location":"usage/uttryck/#svar","title":"Svar","text":"<p>Funktionen returnerar en v\u00e4rdekarta i en niv\u00e5 med information. Anv\u00e4nd index-operatorn (<code>[]</code>) eller funktionen <code>map_get</code> f\u00f6r att plocka ut informationen som \u00f6nskas. F\u00f6ljande nycklar finns att v\u00e4lja p\u00e5 (vissa kan dock vara tomma eller saknas):</p> Nyckel Datatyp <code>objektidentitet</code> Str\u00e4ng (UUID) <code>adressplatsattribut.adressplatsbeteckning.adressplatsnummer</code> Str\u00e4ng <code>adressplatsattribut.adressplatsbeteckning.bokstavstillagg</code> Str\u00e4ng <code>adressplatsattribut.adressplatsbeteckning.lagestillagg</code> Str\u00e4ng (\"UH\", \"UV\", \"U\") <code>adressplatsattribut.adressplatsbeteckning.lagestillagsnummer</code> Heltal <code>adressplatsattribut.adressplatsbeteckning.avvikandeAdressplatsBeteckning</code> Str\u00e4ng <code>adressplatsattribut.adressplatsbeteckning.avvikerFranStandarden</code> Boolskt <code>adressplatsattribut.adressplatstyp</code> Str\u00e4ng (\"Gatuadressplats\", \"Metertalsadressplats\", \"Byadressplats\", \"G\u00e5rdsadressplats\") <code>adressplatsattribut.insamlingslage</code> Str\u00e4ng (\"Byggnad\", \"Ing\u00e5ng\", \"Infart\", \"Tomtplats\", \"Ungef\u00e4rligt l\u00e4gesbest\u00e4md\", \"\u00d6vrigt l\u00e4ge\") <code>adressplatsattribut.status</code> Str\u00e4ng (\"Reserverad\", \"G\u00e4llande\") <code>adressplatsattribut.objektstatus</code> Str\u00e4ng (\"G\u00e4llande\") <code>adressplatsattribut.postnummer</code> Heltal <code>adressplatsattribut.postort</code> Str\u00e4ng <code>adressplatsnamn.popularnamn</code> Str\u00e4ng <code>adressplatsnamn.ortid</code> Str\u00e4ng <code>adressomrade.objektidentitet</code> Str\u00e4ng (UUID) <code>adressomrade.objektversion</code> Heltal <code>adressomrade.versionGiltigFran</code> Str\u00e4ng (Datum) <code>adressomrade.faststalltNamn</code> Str\u00e4ng <code>adressomrade.ortid</code> Str\u00e4ng <code>adressomrade.adressomradestyp</code> Str\u00e4ng (\"Gatuadressomrade\", \"Metertalsadressomrade\", \"Byadressomrade\") <code>adressomrade.objektstatus</code> Str\u00e4ng (\"G\u00e4llande\") <code>adressomrade.kommundel.objektidentitet</code> Str\u00e4ng (UUID) <code>adressomrade.kommundel.objektversion</code> Heltal <code>adressomrade.kommundel.versionGiltigFran</code> Str\u00e4ng (Datum) <code>adressomrade.kommundel.faststalltNamn</code> Str\u00e4ng <code>adressomrade.kommundel.ortid</code> Str\u00e4ng <code>adressomrade.kommundel.objektstatus</code> Str\u00e4ng (\"G\u00e4llande\") <code>adressomrade.kommundel.kommunkod</code> Str\u00e4ng <code>adressomrade.kommundel.kommunnamn</code> Str\u00e4ng <code>gardsadressomrade.faststalltNamn</code> Str\u00e4ng <code>gardsadressomrade.ortid</code> Str\u00e4ng <code>gardsadressomrade.objektstatus</code> Str\u00e4ng (\"G\u00e4llande\") <code>gardsadressomrade.adressomrade.objektidentitet</code> Str\u00e4ng (UUID) <code>gardsadressomrade.adressomrade.objektversion</code> Heltal <code>gardsadressomrade.adressomrade.versionGiltigFran</code> Str\u00e4ng (Datum) <code>gardsadressomrade.adressomrade.faststalltNamn</code> Str\u00e4ng <code>gardsadressomrade.adressomrade.ortid</code> Str\u00e4ng <code>gardsadressomrade.adressomrade.adressomradestyp</code> Str\u00e4ng (\"Gatuadressomrade\", \"Metertalsadressomrade\", \"Byadressomrade\") <code>gardsadressomrade.adressomrade.objektstatus</code> Str\u00e4ng (\"G\u00e4llande\") <code>gardsadressomrade.adressomrade.kommundel.objektidentitet</code> Str\u00e4ng (UUID) <code>gardsadressomrade.adressomrade.kommundel.objektversion</code> Heltal <code>gardsadressomrade.adressomrade.kommundel.versionGiltigFran</code> Str\u00e4ng (Datum) <code>gardsadressomrade.adressomrade.kommundel.faststalltNamn</code> Str\u00e4ng <code>gardsadressomrade.adressomrade.kommundel.ortid</code> Str\u00e4ng <code>gardsadressomrade.adressomrade.kommundel.objektstatus</code> Str\u00e4ng (\"G\u00e4llande\") <code>gardsadressomrade.adressomrade.kommundel.kommunkod</code> Str\u00e4ng <code>gardsadressomrade.adressomrade.kommundel.kommunnamn</code> Str\u00e4ng <code>adressplatsanmarkning</code> Lista med v\u00e4rdekartor <code>adressplatsanmarkning[*].anmarkningstyp</code> Str\u00e4ng <code>adressplatsanmarkning[*].anmarkningstext</code> Str\u00e4ng <code>adressattAnlaggning.anlaggningstyp</code> Str\u00e4ng <code>adressattAnlaggning.anlaggningstext</code> Str\u00e4ng <code>distriktstillhorighet.distriktskod</code> Str\u00e4ng <code>distriktstillhorighet.distriktsnamn</code> Str\u00e4ng <code>registerenhetsreferens.objektidentitet</code> Str\u00e4ng (UUID) <code>registerenhetsreferens.beteckning</code> Str\u00e4ng <code>registerenhetsreferens.typ</code> Str\u00e4ng (\"Fastighet\" eller \"Samf\u00e4llighet\")"},{"location":"usage/uttryck/#exempel","title":"Exempel","text":"<ul> <li><code>address( @geometry )</code> \u2192 v\u00e4rdekarta med information f\u00f6r den adress som ligger n\u00e4rmast aktuellt objekt</li> <li><code>address( '8e0cd471-f10c-47eb-a9ea-e95355e4f2e1' )[ 'registerenhetsreferens.beteckning' ]</code> \u2192 fastighetsbeteckning f\u00f6r adressen med den givna identiteten</li> <li><code>address( 'Gj\u00f6rwellsgatan 22' )[ 'adressomrade.faststalltNamn' ]</code> \u2192 <code>'Gj\u00f6rwellsgatan'</code></li> <li><code>map_get( address( 'Kyrkogatan 10' ), 'adressplatsattribut.adressplatsbeteckning.adressplatsnummer' )</code> \u2192 <code>'10'</code> (notera att adressbeteckningen f\u00f6rekommer i m\u00e5nga orter i Sverige, och exakt vilken adress som returneras d\u00e4rmed ej \u00e4r definerat)</li> <li><code>map_get( address( 'Kyrkogatan 10', '1784' ), 'adressomrade.kommundel.kommunnamn' )</code> \u2192 <code>'Arvika'</code></li> </ul>"},{"location":"usage/uttryck/#address_geometry","title":"<code>address_geometry(geometri | id | beteckning, [kommunkod])</code>","text":"<p>H\u00e4mtar geometrin f\u00f6r en adress. Funktionen kan ta olika typer av argument.</p>"},{"location":"usage/uttryck/#argument_4","title":"Argument","text":""},{"location":"usage/uttryck/#geometri_1","title":"Geometri","text":"<p>H\u00e4mtar geometrin f\u00f6r den adress som ligger n\u00e4rmast den givna geometrin.</p>"},{"location":"usage/uttryck/#syntax_3","title":"Syntax","text":"<pre><code>address(geometri)\n</code></pre>"},{"location":"usage/uttryck/#argument_5","title":"Argument","text":"<pre><code>geometri</code></pre> geometri som ska s\u00f6kas i n\u00e4rheten av"},{"location":"usage/uttryck/#uuid_1","title":"UUID","text":"<p>H\u00e4mtar geometrin f\u00f6r adressen med en given identitet (UUID).</p>"},{"location":"usage/uttryck/#syntax_4","title":"Syntax","text":"<pre><code>address(id)\n</code></pre>"},{"location":"usage/uttryck/#argument_6","title":"Argument","text":"<pre><code>id</code></pre> identitet f\u00f6r den adress som ska h\u00e4mtas"},{"location":"usage/uttryck/#beteckning_1","title":"Beteckning","text":"<p>H\u00e4mtar geometrin f\u00f6r adressen med en given beteckning, s\u00f6kningen kan valfritt begr\u00e4nsas till en given kommunkod.</p>"},{"location":"usage/uttryck/#syntax_5","title":"Syntax","text":"<pre><code>address(beteckning, [kommunkod])\n</code></pre> <p><code>[ ]</code> markerar ett valfritt argument</p>"},{"location":"usage/uttryck/#argument_7","title":"Argument","text":"<pre><code>beteckning</code></pre> beteckning f\u00f6r den adress som ska h\u00e4mtas <pre><code>kommunkod</code></pre> kommunkod inom vilken adresser ska s\u00f6kas p\u00e5"},{"location":"usage/uttryck/#noteringar_1","title":"Noteringar","text":"<p>S\u00f6kning p\u00e5 beteckning utan kommunkod kan ge adresser i fel del av landet</p>"},{"location":"usage/uttryck/#svar_1","title":"Svar","text":"<p>En punktgeometri.</p>"},{"location":"usage/uttryck/#exempel_1","title":"Exempel","text":"<ul> <li><code>address_geometry( @geometry )</code> \u2192 punktgeometri f\u00f6r den adress som ligger n\u00e4rmast aktuellt objekt</li> <li><code>address_geometry( '8e0cd471-f10c-47eb-a9ea-e95355e4f2e1' )</code> \u2192 punktgeometri f\u00f6r adressen med den givna identiteten</li> <li><code>address_geometry( 'Gj\u00f6rwellsgatan 22' )</code> \u2192 punktgeometri f\u00f6r adressen till Swecos huvudkontor</li> <li><code>address_geometry( 'Kyrkogatan 10' )</code> \u2192 punktgeometri f\u00f6r adressen \"Kyrkogatan 10\" i en slumpvis ort i Sverige d\u00e4r adressen f\u00f6rekommer</li> <li><code>address_geometry( 'Kyrkogatan 10', '1784' )</code> \u2192 punktgeometri f\u00f6r adressen \"Kyrkogatan 10\", garanterat i Arvika</li> </ul>"},{"location":"usage/uttryck/#property","title":"<code>property(geometri | id | beteckning, [kommunkod])</code>","text":"<p>H\u00e4mtar information f\u00f6r en fastighet eller samf\u00e4llighet. Funktionen kan ta olika typer av argument.</p>"},{"location":"usage/uttryck/#argument_8","title":"Argument","text":""},{"location":"usage/uttryck/#geometri_2","title":"Geometri","text":"<p>H\u00e4mtar information f\u00f6r den fastighet eller samf\u00e4llighet inom vilken den givna punkten ligger.</p>"},{"location":"usage/uttryck/#syntax_6","title":"Syntax","text":"<pre><code>property_geometry(geometri)\n</code></pre>"},{"location":"usage/uttryck/#argument_9","title":"Argument","text":"<pre><code>geometri</code></pre> geometri som ska s\u00f6kas i n\u00e4rheten av"},{"location":"usage/uttryck/#uuid_2","title":"UUID","text":"<p>H\u00e4mtar information f\u00f6r fastigheten eller samf\u00e4lligheten med en given identitet (UUID).</p>"},{"location":"usage/uttryck/#syntax_7","title":"Syntax","text":"<pre><code>property_geometry(id)\n</code></pre>"},{"location":"usage/uttryck/#argument_10","title":"Argument","text":"<pre><code>id</code></pre> identitet f\u00f6r den fastighet eller samf\u00e4llighet vars information som ska h\u00e4mtas"},{"location":"usage/uttryck/#beteckning_2","title":"Beteckning","text":"<p>H\u00e4mtar information f\u00f6r fastigheten eller samf\u00e4lligheten med en given beteckning, s\u00f6kningen kan valfritt begr\u00e4nsas till en given kommunkod.</p>"},{"location":"usage/uttryck/#syntax_8","title":"Syntax","text":"<pre><code>property_geometry(beteckning, [kommunkod])\n</code></pre> <p><code>[ ]</code> markerar ett valfritt argument</p>"},{"location":"usage/uttryck/#argument_11","title":"Argument","text":"<pre><code>beteckning</code></pre> beteckning f\u00f6r den fastigheten eller samf\u00e4lligheten som ska h\u00e4mtas <pre><code>kommunkod</code></pre> kommunkod inom vilken fastigheter och samf\u00e4lligheter ska s\u00f6kas p\u00e5"},{"location":"usage/uttryck/#noteringar_2","title":"Noteringar","text":"<p>S\u00f6kning p\u00e5 beteckning utan kommunkod eller kommunnamn i beteckningen kan ge fastigheter eller samf\u00e4lligheter i fel del av landet.</p>"},{"location":"usage/uttryck/#svar_2","title":"Svar","text":"<p>Vilket svar som erh\u00e5lles \u00e4r beroende av vilka tj\u00e4nster som \u00e4r konfigurerade i inst\u00e4llningarna.</p>"},{"location":"usage/uttryck/#for-fastighetsindelning-direkt","title":"F\u00f6r Fastighetsindelning Direkt","text":"Nyckel Beskrivning objektidentitet Str\u00e4ng (UUID) objekttyp Str\u00e4ng (\"fastighetsomr\u00e5de\") senastandrad Str\u00e4ng (Datum &amp; Tid) lanskod Str\u00e4ng kommunkod Str\u00e4ng kommunnamn Str\u00e4ng trakt Str\u00e4ng block Str\u00e4ng enhet Heltal etikett Str\u00e4ng beteckning Str\u00e4ng <p>Begr\u00e4nsningar i tj\u00e4nsten Fastighetsindelning Direkt</p> <p>Tj\u00e4nsten Fastighetsindelning Direkt \u00e4r avgiftsfri, men inneh\u00e5ller i dagsl\u00e4get ej 3D-fastigheter.</p>"},{"location":"usage/uttryck/#for-fastighet-och-samfallighet-direkt","title":"F\u00f6r Fastighet och Samf\u00e4llighet Direkt","text":""},{"location":"usage/uttryck/#exempel_2","title":"Exempel","text":"<ul> <li><code>property( @geometry )</code> \u2192 v\u00e4rdekarta med information f\u00f6r den fastighet eller samf\u00e4llighet inom vilken aktuellt objekt ligger</li> <li><code>property( '8e0cd471-f10c-47eb-a9ea-e95355e4f2e1' )[ 'beteckning' ]</code> \u2192 beteckning f\u00f6r fastigheten eller samf\u00e4lligheten med den givna identiteten</li> <li><code>property( 'Stockholm Tr\u00e4ngk\u00e5ren 6' )[ 'objektidentitet' ]</code> \u2192 identitet f\u00f6r fastigheten p\u00e5 vilken Swecos huvudkontor ligger</li> <li><code>map_get( property( 'Torp 1:3' ), 'kommunnamn' )</code> \u2192 kommunnamn fastigheten \"Torp 1:3\" i en slumpvis ort i Sverige d\u00e4r fastighetsbeteckningen f\u00f6rekommer</li> <li><code>map_get( property( 'Torp 1:3', '2084' ), 'kommunnamn ')</code> \u2192 <code>'Avesta'</code></li> </ul>"},{"location":"usage/uttryck/#property_geometry","title":"<code>property_geometry(geometri | id | beteckning, [kommunkod])</code>","text":"<p>H\u00e4mtar geometrin f\u00f6r en fastighet eller samf\u00e4llighet. Funktionen kan ta olika typer av argument.</p>"},{"location":"usage/uttryck/#noteringar_3","title":"Noteringar","text":"<p>Majoriteten av fastigheter \u00e4r redovisade som polygoner, men det finns s\u00e5v\u00e4l fastigheter som samf\u00e4lligheter som ist\u00e4llet \u00e4r redovisade som linjer eller punkter.</p> <p>Begr\u00e4nsningar i tj\u00e4nsten Fastighetsindelning Direkt</p> <p>Tj\u00e4nsten Fastighetsindelning Direkt \u00e4r avgiftsfri, men inneh\u00e5ller i dagsl\u00e4get ej 3D-fastigheter.</p>"},{"location":"usage/uttryck/#argument_12","title":"Argument","text":""},{"location":"usage/uttryck/#geometri_3","title":"Geometri","text":"<p>H\u00e4mtar geometrin f\u00f6r den fastighet eller samf\u00e4llighet inom vilken den givna punkten ligger.</p>"},{"location":"usage/uttryck/#syntax_9","title":"Syntax","text":"<pre><code>property_geometry(geometri)\n</code></pre>"},{"location":"usage/uttryck/#argument_13","title":"Argument","text":"<pre><code>geometri</code></pre> geometri som ska s\u00f6kas i n\u00e4rheten av"},{"location":"usage/uttryck/#uuid_3","title":"UUID","text":"<p>H\u00e4mtar geometrin f\u00f6r fastigheten eller samf\u00e4lligheten med en given identitet (UUID).</p>"},{"location":"usage/uttryck/#syntax_10","title":"Syntax","text":"<pre><code>property_geometry(id)\n</code></pre>"},{"location":"usage/uttryck/#argument_14","title":"Argument","text":"<pre><code>id</code></pre> identitet f\u00f6r den fastighet eller samf\u00e4llighet vars geometri som ska h\u00e4mtas"},{"location":"usage/uttryck/#beteckning_3","title":"Beteckning","text":"<p>H\u00e4mtar geometrin f\u00f6r fastigheten eller samf\u00e4lligheten med en given beteckning, s\u00f6kningen kan valfritt begr\u00e4nsas till en given kommunkod.</p>"},{"location":"usage/uttryck/#syntax_11","title":"Syntax","text":"<pre><code>property_geometry(beteckning, [kommunkod])\n</code></pre> <p><code>[ ]</code> markerar ett valfritt argument</p>"},{"location":"usage/uttryck/#argument_15","title":"Argument","text":"<pre><code>beteckning</code></pre> beteckning f\u00f6r den fastigheten eller samf\u00e4lligheten som ska h\u00e4mtas <pre><code>kommunkod</code></pre> kommunkod inom vilken fastigheter och samf\u00e4lligheter ska s\u00f6kas p\u00e5"},{"location":"usage/uttryck/#noteringar_4","title":"Noteringar","text":"<p>S\u00f6kning p\u00e5 beteckning utan kommunkod eller kommunnamn i beteckningen kan ge fastigheter eller samf\u00e4lligheter i fel del av landet.</p>"},{"location":"usage/uttryck/#exempel_3","title":"Exempel","text":"<ul> <li><code>property_geometry( @geometry )</code> \u2192 geometri f\u00f6r den fastighet eller samf\u00e4llighet inom vilken aktuellt objekt ligger</li> <li><code>property_geometry( '8e0cd471-f10c-47eb-a9ea-e95355e4f2e1' )</code> \u2192 geometri f\u00f6r adressen med den givna identiteten</li> <li><code>property_geometry( 'Stockholm Tr\u00e4ngk\u00e5ren 6' )</code> \u2192 polygongeometri f\u00f6r fastigheten p\u00e5 vilken Swecos huvudkontor ligger</li> <li><code>property_geometry( 'Torp 1:3' )</code> \u2192 geometri f\u00f6r fastigheten \"Torp 1:3\" i en slumpvis ort i Sverige d\u00e4r fastighetsbeteckningen f\u00f6rekommer</li> <li><code>property_geometry( 'Torp 1:3', '2084' )</code> \u2192 polygongeometri f\u00f6r fastigheten \"Torp 1:3\", garanterat i Avesta</li> </ul>"},{"location":"usage/algoritmer/","title":"Algoritmer","text":"<p>Detta plugin tillhandah\u00e5ller ett antal algoritmer som du hittar i verktygsl\u00e5dan:</p>"},{"location":"usage/algoritmer/#nedladdning","title":"Nedladdning","text":"<ul> <li>H\u00e4mta adresser inom ett omr\u00e5de</li> <li>H\u00e4mta adresser inom polygoner</li> <li>H\u00e4mta fastigheter och samf\u00e4lligheter inom ett omr\u00e5de</li> <li>H\u00e4mta fastigheter och samf\u00e4lligheter inom polygoner</li> </ul>"},{"location":"usage/algoritmer/download-addresses-bounding/","title":"H\u00e4mta adresser inom ett givet omr\u00e5de","text":""},{"location":"usage/algoritmer/download-addresses-bounding/#krav-pa-tjanster","title":"Krav p\u00e5 tj\u00e4nster","text":"<p>F\u00f6r att algoritmen ska fungera beh\u00f6ver tj\u00e4nsten Bel\u00e4genhetsadress Direkt vara konfigurerad i inst\u00e4llningar.</p>"},{"location":"usage/algoritmer/download-addresses-polygons/","title":"H\u00e4mta adresser inom givna polygoner","text":""},{"location":"usage/algoritmer/download-addresses-polygons/#krav-pa-tjanster","title":"Krav p\u00e5 tj\u00e4nster","text":"<p>F\u00f6r att algoritmen ska fungera beh\u00f6ver tj\u00e4nsten Bel\u00e4genhetsadress Direkt vara konfigurerad i inst\u00e4llningar.</p>"},{"location":"usage/algoritmer/download-properties-bounding/","title":"H\u00e4mta fastigheter och samf\u00e4lligheter inom ett givet omr\u00e5de","text":""},{"location":"usage/algoritmer/download-properties-bounding/#krav-pa-tjanster","title":"Krav p\u00e5 tj\u00e4nster","text":"<p>F\u00f6ljande tj\u00e4nster beh\u00f6ver konfigureras under inst\u00e4llningar:</p> <ul> <li>Registerbeteckning Direkt &amp; Fastighet och Samf\u00e4llighet Direkteller</li> <li>Registerbeteckning Direkt &amp; Fastighetsindelning Direkteller</li> <li>Fastighetsindelning Direkt</li> </ul> <p>Begr\u00e4nsningar i tj\u00e4nsten Fastighetsindelning Direkt</p> <p>Tj\u00e4nsten Fastighetsindelning Direkt \u00e4r avgiftsfri, men inneh\u00e5ller i dagsl\u00e4get ej 3D-fastigheter.</p>"},{"location":"usage/algoritmer/download-properties-polygons/","title":"H\u00e4mta fastigheter och samf\u00e4lligheter inom givna polygoner","text":""},{"location":"usage/algoritmer/download-properties-polygons/#krav-pa-tjanster","title":"Krav p\u00e5 tj\u00e4nster","text":"<p>F\u00f6ljande tj\u00e4nster beh\u00f6ver konfigureras under inst\u00e4llningar:</p> <ul> <li>Registerbeteckning Direkt &amp; Fastighet och Samf\u00e4llighet Direkteller</li> <li>Registerbeteckning Direkt &amp; Fastighetsindelning Direkteller</li> <li>Fastighetsindelning Direkt</li> </ul> <p>Begr\u00e4nsningar i tj\u00e4nsten Fastighetsindelning Direkt</p> <p>Tj\u00e4nsten Fastighetsindelning Direkt \u00e4r avgiftsfri, men inneh\u00e5ller i dagsl\u00e4get ej 3D-fastigheter.</p>"},{"location":"usage/installningar/atkomstnycklar/","title":"\u00c5tkomstnycklar fr\u00e5n Lantm\u00e4teriet","text":"<p>Denna sida inneh\u00e5ller en sammanfattning av stegen man beh\u00f6ver g\u00e5 f\u00f6r att g\u00e5 tillg\u00e5ng till de \u00e5tkomstnycklar som kr\u00e4vs f\u00f6r att kunna anv\u00e4nda detta plugin.</p> <p>Mer information finns att l\u00e4sa hos Lantm\u00e4teriet, s\u00e4rskilt:</p> <ul> <li>Information om API Portalen (engelska)</li> <li>Nationella geodataplattformen - Konsument</li> </ul> <p>Notera att flera av stegen som beskrivs h\u00e4r inneb\u00e4r en manuell hantering hos Lantm\u00e4teriet, beroende p\u00e5 vad det g\u00e4ller och deras aktuella arbetsbelastning kan hanteringen ta allt fr\u00e5n n\u00e5gra timmar till flera veckor.</p> <p>Dessa instruktioner antar att du inte har n\u00e5got konto eller liknande hos Lantm\u00e4teriet sedan tidigare. Om du redan har konto, best\u00e4llt tj\u00e4nster, eller anv\u00e4nt API-managern s\u00e5 kan du hoppa \u00f6ver de steg som inte \u00e4r aktuella f\u00f6r dig.</p>"},{"location":"usage/installningar/atkomstnycklar/#1-skapa-ett-konto-pa-geotorget","title":"1. Skapa ett konto p\u00e5 Geotorget","text":"<p>F\u00f6rst beh\u00f6ver du ha tillg\u00e5ng till ett konto p\u00e5 Geotorget:</p> <ol> <li>G\u00e5 till Geotorget, klicka p\u00e5 Logga in</li> <li>V\u00e4lj kontotyp och f\u00f6lj stegen</li> </ol>"},{"location":"usage/installningar/atkomstnycklar/#2-bestall-datamangderna-pa-geotorget","title":"2. Best\u00e4ll datam\u00e4ngderna p\u00e5 Geotorget","text":""},{"location":"usage/installningar/atkomstnycklar/#2a-nationella-geodataplattformen","title":"2a. Nationella geodataplattformen","text":"<ol> <li>Logga in p\u00e5 Geotorget</li> <li>V\u00e4lj Nationella geodataplattformen</li> <li>Under Bli konsument, klicka p\u00e5 Ans\u00f6k</li> <li>L\u00e4s igenom och godk\u00e4nn anv\u00e4ndarvillkoren</li> <li>Skicka in ans\u00f6kan</li> </ol> <p>F\u00f6r Nationella geodataplattformen f\u00e5r du automatiskt beh\u00f6righet till APIerna, det kan dock ta n\u00e5gra minuter f\u00f6r systemet att registrera allt.</p>"},{"location":"usage/installningar/atkomstnycklar/#2b-ovriga-tjanster","title":"2b. \u00d6vriga tj\u00e4nster","text":"<ol> <li>Logga in p\u00e5 Geotorget</li> <li>V\u00e4lj Geodataprodukter</li> <li>S\u00f6k fram respektive tj\u00e4nst du vill anv\u00e4nda och klicka p\u00e5 h\u00f6gerpilen f\u00f6r att g\u00e5 vidare</li> <li>S\u00e4kerst\u00e4ll att du v\u00e4ljer samma systemkonto f\u00f6r samtliga tj\u00e4nster<ul> <li>Du kan skapa nya systemkonton fr\u00e5n Mitt konto / Beh\u00f6righeter </li> </ul> </li> <li>Beroende p\u00e5 tj\u00e4nsten kommer du beh\u00f6va besvara n\u00e5gra fr\u00e5gor</li> </ol> <p>Detta plugin kan anv\u00e4nda sig av f\u00f6ljande tj\u00e4nster:</p> <ul> <li>Bel\u00e4genhetsadress Direkt</li> <li>Fastighetsindelning Direkt</li> <li>Gemensamhetsanl\u00e4ggning Direkt</li> <li>Registerbeteckning Direkt</li> <li>Fastighet och Samf\u00e4llighet Direkt (avgiftsbelagd)</li> <li>Ortofoto Nedladdning</li> <li>Markh\u00f6jdmodell Nedladdning</li> </ul>"},{"location":"usage/installningar/atkomstnycklar/#3-skapa-atkomstnycklar-i-api-managern","title":"3. Skapa \u00e5tkomstnycklar i API-managern","text":"<ol> <li>G\u00e5 till Lantm\u00e4teriets API-manager</li> <li>Logga in:</li> </ol> OrganisationskontoPrivatperson <p>Anv\u00e4nd anv\u00e4ndarnamnet p\u00e5 det systemkonto som skapats, och l\u00f6senordet du f\u00e5tt per mail n\u00e4r du skapade systemkontot.</p> <p>Anv\u00e4nd samma inloggningsuppgifter som till Geotorget.</p> <ol> <li>G\u00e5 till Applications i menyraden, v\u00e4lj Add New Application</li> <li>Ge applikationen ett namn och valfri beskrivning</li> </ol> OrganisationskontoPrivatperson <p>Tips: Ange dina initialer eller liknande i applikationsnamnet om enbart du sj\u00e4lv kommer anv\u00e4nda \u00e5tkomstnycklarna du skapat. L\u00e4gg \u00e4ven in t.ex. din mailadress i beskrivningen.</p> <p>Eftersom det ofta \u00e4r flera personer som anv\u00e4nder samma systemkonto inom en organisation, och d\u00e4rmed kommer \u00e5t samma applikationer, underl\u00e4ttar det mycket att veta vem som ansvarar f\u00f6r vilken applikation.</p> <p>Eftersom enbart du sj\u00e4lv kommer anv\u00e4nda ditt konto kan du get applikationen valfritt namn och beskrivning.</p> <ol> <li>P\u00e5 sidan f\u00f6r applikationen, g\u00e5 till Subscriptions</li> <li>V\u00e4lj Subscribe APIs och v\u00e4lj Subscribe p\u00e5 de APIer du vill anv\u00e4nda, namnen p\u00e5 APIerna i API-managern kan dock skilja sig fr\u00e5n    tj\u00e4nstens namn:</li> </ol> Tj\u00e4nst API-namn i API-managern Bel\u00e4genhetsadress Direkt Bel\u00e4genhetsadress_Direkt Fastighetsindelning Direkt OGC-FEATURES-GEOSERVER Gemensamhetsanl\u00e4ggning Direkt Gemensamhetsanl\u00e4ggning_Direkt Registerbeteckning Direkt Registerbeteckning_Direkt Fastighet och Samf\u00e4llighet Direkt FastighetOchSamf\u00e4llighetDirekt Ortofoto Nedladdning STAC-bild Markh\u00f6jdmodell Nedladdning STAC-hojd <ol> <li>G\u00e5 till Production Keys, skrolla ner och klicka p\u00e5 Generate Keys</li> <li>Kopiera Consumer Key och Consumer Secret och klistra in dem i OAuth 2-inst\u00e4llningar i    pluginet</li> </ol>"},{"location":"usage/installningar/atkomstnycklar/#mer-information","title":"Mer information","text":""},{"location":"usage/installningar/atkomstnycklar/#anvandarkonton-organisationskonton-systemkonton-och-applikationer","title":"Anv\u00e4ndarkonton, Organisationskonton, Systemkonton och Applikationer","text":"<p>N\u00e4r man anv\u00e4nder Lantm\u00e4teriets tj\u00e4nster kommer man i kontakt med flera olika kontotyper, vilket kan vara v\u00e4ldigt f\u00f6rvirrande.</p> <ul> <li>Anv\u00e4ndarkonto - Ett anv\u00e4ndarkonto \u00e4r det konto med vilket du loggar in p\u00e5 Geotorget. F\u00f6r privatpersoner \u00e4r detta   din mailadress, f\u00f6r organisationer \u00e4r det ett anv\u00e4ndarnamn best\u00e5ende av en f\u00f6rkortning av din organisations namn f\u00f6ljt   av en f\u00f6rkortning av ditt f\u00f6r- och efternamn.</li> <li>Organisationskonto - Om man inte \u00e4r privatperson s\u00e5 \u00e4r det anv\u00e4ndarkonto med vilket man loggar in till Geotorget   kopplat till ett organisationskonto. Som regel kan alla anv\u00e4ndare som \u00e4r kopplade till samma organisation se samma   information p\u00e5 Geotorget (allts\u00e5 \u00e4ven varandras best\u00e4llningar o.s.v.).<ul> <li>Det \u00e4r m\u00f6jligt att ha flera olika organisationskonton f\u00f6r samma organisation/organisationsnummer om man har olika   \"roller\" i organisationen, t.ex. som slutkonsument respektive vidaref\u00f6r\u00e4ldare. Anv\u00e4ndarkonton \u00e4r d\u00e5 kopplade till   enbart ett av dessa organisationskonton, som alla har unika kundnummer.</li> </ul> </li> <li>Systemkonto - Organisationskonton har ett antal systemkonton kopplade till sig. N\u00e4r man best\u00e4ller en beh\u00f6righet p\u00e5   Geotorget kopplas beh\u00f6righeten till ett systemkonto. F\u00f6r organisationer anv\u00e4nds systemkontot f\u00f6r att logga in p\u00e5   API-managern.</li> <li>Applikation - Varje systemkonto har ett antal applikationer kopplade till sig, och varje applikation kan ges   beh\u00f6righet till en eller flera APIer. N\u00e4r man ansluter fr\u00e5n en programvara (som fr\u00e5n QGIS) \u00e4r det med en applikations   \u00e5tkomstnycklar man g\u00f6r det.</li> </ul> <p>Detta inneb\u00e4r att \"fl\u00f6det\" av konton ser ut s\u00e5h\u00e4r:</p> OrganisationskontoPrivatperson <ol> <li>Du loggar in p\u00e5 Geotorget med ett anv\u00e4ndarkonto som \u00e4r kopplat till ett organisationskonto</li> <li>Du best\u00e4ller beh\u00f6righeter som kopplas till ett systemkonto</li> <li>Du loggar in p\u00e5 API-managern med systemkontot</li> <li>Du skapar en applikation som kopplas till systemkontot</li> <li>Du ger applikationen beh\u00f6righet till en eller flera APIer</li> <li>Du anv\u00e4nder applikationens \u00e5tkomstnycklar f\u00f6r att ansluta till APIerna fr\u00e5n QGIS</li> </ol> <ol> <li>Du loggar in p\u00e5 Geotorget med ett anv\u00e4ndarkonto</li> <li>Du best\u00e4ller beh\u00f6righeter som kopplas till ditt anv\u00e4ndarkonto</li> <li>Du loggar in p\u00e5 API-managern med ditt anv\u00e4ndarkonto</li> <li>Du skapar en applikation som kopplas till ditt anv\u00e4ndarkonto</li> <li>Du ger applikationen beh\u00f6righet till en eller flera APIer</li> <li>Du anv\u00e4nder applikationens \u00e5tkomstnycklar f\u00f6r att ansluta till APIerna fr\u00e5n QGIS</li> </ol>"}]}